"""
This type stub file was generated by pyright.
"""

from kafka.record.abc import ABCRecord, ABCRecordBatch, ABCRecordBatchBuilder

class DefaultRecordBase:
    __slots__ = ...
    HEADER_STRUCT = ...
    ATTRIBUTES_OFFSET = ...
    CRC_OFFSET = ...
    AFTER_LEN_OFFSET = ...
    CODEC_MASK = ...
    CODEC_NONE = ...
    CODEC_GZIP = ...
    CODEC_SNAPPY = ...
    CODEC_LZ4 = ...
    CODEC_ZSTD = ...
    TIMESTAMP_TYPE_MASK = ...
    TRANSACTIONAL_MASK = ...
    CONTROL_MASK = ...
    LOG_APPEND_TIME = ...
    CREATE_TIME = ...

class DefaultRecordBatch(DefaultRecordBase, ABCRecordBatch):
    __slots__ = ...
    def __init__(self, buffer) -> None: ...
    @property
    def base_offset(self):  # -> Any:
        ...
    @property
    def magic(self):  # -> Any:
        ...
    @property
    def crc(self):  # -> Any:
        ...
    @property
    def attributes(self):  # -> Any:
        ...
    @property
    def last_offset_delta(self):  # -> Any:
        ...
    @property
    def compression_type(self):  # -> Any:
        ...
    @property
    def timestamp_type(self):  # -> int:
        ...
    @property
    def is_transactional(self):  # -> bool:
        ...
    @property
    def is_control_batch(self):  # -> bool:
        ...
    @property
    def first_timestamp(self):  # -> Any:
        ...
    @property
    def max_timestamp(self):  # -> Any:
        ...
    def __iter__(self):  # -> Self:
        ...
    def __next__(self):  # -> DefaultRecord:
        ...

    next = ...
    def validate_crc(self):  # -> Any:
        ...

class DefaultRecord(ABCRecord):
    __slots__ = ...
    def __init__(self, offset, timestamp, timestamp_type, key, value, headers) -> None: ...
    @property
    def offset(self):  # -> Any:
        ...
    @property
    def timestamp(self):  # -> Any:
        """Epoch milliseconds"""

    @property
    def timestamp_type(self):  # -> Any:
        """CREATE_TIME(0) or APPEND_TIME(1)"""

    @property
    def key(self):  # -> Any:
        """Bytes key or None"""

    @property
    def value(self):  # -> Any:
        """Bytes value or None"""

    @property
    def headers(self):  # -> Any:
        ...
    @property
    def checksum(self):  # -> None:
        ...
    def __repr__(self):  # -> LiteralString:
        ...

class DefaultRecordBatchBuilder(DefaultRecordBase, ABCRecordBatchBuilder):
    MAX_RECORD_OVERHEAD = ...
    __slots__ = ...
    def __init__(
        self, magic, compression_type, is_transactional, producer_id, producer_epoch, base_sequence, batch_size
    ) -> None: ...
    def append(
        self,
        offset,
        timestamp,
        key,
        value,
        headers,
        encode_varint=...,
        size_of_varint=...,
        get_type=...,
        type_int=...,
        time_time=...,
        byte_like=...,
        bytearray_type=...,
        len_func=...,
        zero_len_varint=...,
    ):  # -> DefaultRecordMetadata | None:
        """Write message to messageset buffer with MsgVersion 2"""

    def write_header(self, use_compression_type=...):  # -> None:
        ...
    def build(self):  # -> bytearray:
        ...
    def size(self):  # -> int:
        """Return current size of data written to buffer"""

    def size_in_bytes(self, offset, timestamp, key, value, headers):  # -> int:
        ...
    @classmethod
    def size_of(cls, key, value, headers):  # -> int:
        ...
    @classmethod
    def estimate_size_in_bytes(cls, key, value, headers):  # -> int:
        """Get the upper bound estimate on the size of record"""

class DefaultRecordMetadata:
    __slots__ = ...
    def __init__(self, offset, size, timestamp) -> None: ...
    @property
    def offset(self):  # -> Any:
        ...
    @property
    def crc(self):  # -> None:
        ...
    @property
    def size(self):  # -> Any:
        ...
    @property
    def timestamp(self):  # -> Any:
        ...
    def __repr__(self):  # -> LiteralString:
        ...
