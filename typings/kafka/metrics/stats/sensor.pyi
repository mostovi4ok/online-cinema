"""
This type stub file was generated by pyright.
"""

class Sensor:
    """
    A sensor applies a continuous sequence of numerical values
    to a set of associated metrics. For example a sensor on
    message size would record a sequence of message sizes using
    the `record(double)` api and would maintain a set
    of metrics about request sizes such as the average or max.
    """

    def __init__(self, registry, name, parents, config, inactive_sensor_expiration_time_seconds) -> None: ...
    @property
    def name(self):  # -> Any:
        """
        The name this sensor is registered with.
        This name will be unique among all registered sensors.
        """

    @property
    def metrics(self):  # -> tuple[Any, ...]:
        ...
    def record(self, value=..., time_ms=...):  # -> None:
        """
        Record a value at a known time.

        Arguments:
            value (double): The value we are recording
            time_ms (int): A POSIX timestamp in milliseconds.
                Default: The time when record() is evaluated (now)

        Raises:
            QuotaViolationException: if recording this value moves a
                metric beyond its configured maximum or minimum bound

        """

    def add_compound(self, compound_stat, config=...):  # -> None:
        """
        Register a compound statistic with this sensor which
        yields multiple measurable quantities (like a histogram)

        Arguments:
            stat (AbstractCompoundStat): The stat to register
            config (MetricConfig): The configuration for this stat.
                If None then the stat will use the default configuration
                for this sensor.

        """

    def add(self, metric_name, stat, config=...):  # -> None:
        """
        Register a metric with this sensor

        Arguments:
            metric_name (MetricName): The name of the metric
            stat (AbstractMeasurableStat): The statistic to keep
            config (MetricConfig): A special configuration for this metric.
                If None use the sensor default configuration.

        """

    def has_expired(self):
        """
        Return True if the Sensor is eligible for removal due to inactivity.
        """
