"""
This type stub file was generated by pyright.
"""

class SimpleBufferPool:
    """A simple pool of BytesIO objects with a weak memory ceiling."""

    def __init__(self, memory, poolable_size, metrics=..., metric_group_prefix=...) -> None:
        """Create a new buffer pool.

        Arguments:
            memory (int): maximum memory that this buffer pool can allocate
            poolable_size (int): memory size per buffer to cache in the free
                list rather than deallocating

        """

    def allocate(self, size, max_time_to_block_ms):  # -> BytesIO:
        """
        Allocate a buffer of the given size. This method blocks if there is not
        enough memory and the buffer pool is configured with blocking mode.

        Arguments:
            size (int): The buffer size to allocate in bytes [ignored]
            max_time_to_block_ms (int): The maximum time in milliseconds to
                block for buffer memory to be available

        Returns:
            io.BytesIO

        """

    def deallocate(self, buf):  # -> None:
        """
        Return buffers to the pool. If they are of the poolable size add them
        to the free list, otherwise just mark the memory as free.

        Arguments:
            buffer_ (io.BytesIO): The buffer to return

        """

    def queued(self):  # -> int:
        """The number of threads blocked waiting on memory."""
