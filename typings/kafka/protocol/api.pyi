"""
This type stub file was generated by pyright.
"""

import abc

from kafka.protocol.struct import Struct

class RequestHeader(Struct):
    SCHEMA = ...
    def __init__(self, request, correlation_id=..., client_id=...) -> None: ...

class RequestHeaderV2(Struct):
    SCHEMA = ...
    def __init__(self, request, correlation_id=..., client_id=..., tags=...) -> None: ...

class ResponseHeader(Struct):
    SCHEMA = ...

class ResponseHeaderV2(Struct):
    SCHEMA = ...

class Request(Struct):
    __metaclass__ = abc.ABCMeta
    FLEXIBLE_VERSION = ...
    @abc.abstractproperty
    def API_KEY(self):  # -> None:
        """Integer identifier for api request"""
        ...

    @abc.abstractproperty
    def API_VERSION(self):  # -> None:
        """Integer of api request version"""
        ...

    @abc.abstractproperty
    def SCHEMA(self):  # -> None:
        """An instance of Schema() representing the request structure"""
        ...

    @abc.abstractproperty
    def RESPONSE_TYPE(self):  # -> None:
        """The Response class associated with the api request"""
        ...

    def expect_response(self):  # -> Literal[True]:
        """Override this method if an api request does not always generate a response"""

    def to_object(self):  # -> dict[Any, Any]:
        ...
    def build_request_header(self, correlation_id, client_id):  # -> RequestHeaderV2 | RequestHeader:
        ...
    def parse_response_header(self, read_buffer):  # -> ResponseHeaderV2 | ResponseHeader:
        ...

class Response(Struct):
    __metaclass__ = abc.ABCMeta
    @abc.abstractproperty
    def API_KEY(self):  # -> None:
        """Integer identifier for api request/response"""
        ...

    @abc.abstractproperty
    def API_VERSION(self):  # -> None:
        """Integer of api request/response version"""
        ...

    @abc.abstractproperty
    def SCHEMA(self):  # -> None:
        """An instance of Schema() representing the response structure"""
        ...

    def to_object(self):  # -> dict[Any, Any]:
        ...
