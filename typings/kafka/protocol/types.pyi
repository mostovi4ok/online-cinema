"""
This type stub file was generated by pyright.
"""

from kafka.protocol.abstract import AbstractType

class Int8(AbstractType):
    _pack = ...
    _unpack = ...
    @classmethod
    def encode(cls, value):  # -> bytes:
        ...
    @classmethod
    def decode(cls, data):  # -> Any:
        ...

class Int16(AbstractType):
    _pack = ...
    _unpack = ...
    @classmethod
    def encode(cls, value):  # -> bytes:
        ...
    @classmethod
    def decode(cls, data):  # -> Any:
        ...

class Int32(AbstractType):
    _pack = ...
    _unpack = ...
    @classmethod
    def encode(cls, value):  # -> bytes:
        ...
    @classmethod
    def decode(cls, data):  # -> Any:
        ...

class Int64(AbstractType):
    _pack = ...
    _unpack = ...
    @classmethod
    def encode(cls, value):  # -> bytes:
        ...
    @classmethod
    def decode(cls, data):  # -> Any:
        ...

class Float64(AbstractType):
    _pack = ...
    _unpack = ...
    @classmethod
    def encode(cls, value):  # -> bytes:
        ...
    @classmethod
    def decode(cls, data):  # -> Any:
        ...

class String(AbstractType):
    def __init__(self, encoding=...) -> None: ...
    def encode(self, value):  # -> bytes:
        ...
    def decode(self, data):  # -> None:
        ...

class Bytes(AbstractType):
    @classmethod
    def encode(cls, value):  # -> bytes:
        ...
    @classmethod
    def decode(cls, data):  # -> None:
        ...
    @classmethod
    def repr(cls, value):  # -> str:
        ...

class Boolean(AbstractType):
    _pack = ...
    _unpack = ...
    @classmethod
    def encode(cls, value):  # -> bytes:
        ...
    @classmethod
    def decode(cls, data):  # -> Any:
        ...

class Schema(AbstractType):
    def __init__(self, *fields) -> None: ...
    def encode(self, item):  # -> bytes:
        ...
    def decode(self, data):  # -> tuple[Any, ...]:
        ...
    def __len__(self):  # -> int:
        ...
    def repr(self, value):  # -> LiteralString | str:
        ...

class Array(AbstractType):
    def __init__(self, *array_of) -> None: ...
    def encode(self, items):  # -> bytes:
        ...
    def decode(self, data):  # -> list[tuple[Any, ...] | None] | None:
        ...
    def repr(self, list_of_items):  # -> str:
        ...

class UnsignedVarInt32(AbstractType):
    @classmethod
    def decode(cls, data):  # -> Any:
        ...
    @classmethod
    def encode(cls, value):  # -> bytes:
        ...

class VarInt32(AbstractType):
    @classmethod
    def decode(cls, data):  # -> Any:
        ...
    @classmethod
    def encode(cls, value):  # -> bytes:
        ...

class VarInt64(AbstractType):
    @classmethod
    def decode(cls, data): ...
    @classmethod
    def encode(cls, value):  # -> bytes:
        ...

class CompactString(String):
    def decode(self, data):  # -> None:
        ...
    def encode(self, value):  # -> bytes:
        ...

class TaggedFields(AbstractType):
    @classmethod
    def decode(cls, data):  # -> dict[Any, Any]:
        ...
    @classmethod
    def encode(cls, value):  # -> bytes:
        ...

class CompactBytes(AbstractType):
    @classmethod
    def decode(cls, data):  # -> None:
        ...
    @classmethod
    def encode(cls, value):  # -> bytes:
        ...

class CompactArray(Array):
    def encode(self, items):  # -> bytes:
        ...
    def decode(self, data):  # -> list[tuple[Any, ...] | None] | None:
        ...
