"""
This type stub file was generated by pyright.
"""

class KafkaError(RuntimeError):
    retriable = ...
    invalid_metadata = ...

class IllegalStateError(KafkaError): ...
class IllegalArgumentError(KafkaError): ...

class NoBrokersAvailable(KafkaError):
    retriable = ...
    invalid_metadata = ...

class NodeNotReadyError(KafkaError):
    retriable = ...

class KafkaProtocolError(KafkaError):
    retriable = ...

class CorrelationIdError(KafkaProtocolError):
    retriable = ...

class Cancelled(KafkaError):
    retriable = ...

class TooManyInFlightRequests(KafkaError):
    retriable = ...

class StaleMetadata(KafkaError):
    retriable = ...
    invalid_metadata = ...

class MetadataEmptyBrokerList(KafkaError):
    retriable = ...

class UnrecognizedBrokerVersion(KafkaError): ...
class IncompatibleBrokerVersion(KafkaError): ...

class CommitFailedError(KafkaError):
    def __init__(self, *args, **kwargs) -> None: ...

class AuthenticationMethodNotSupported(KafkaError): ...

class AuthenticationFailedError(KafkaError):
    retriable = ...

class BrokerResponseError(KafkaError):
    errno = ...
    message = ...
    description = ...

class NoError(BrokerResponseError):
    errno = ...
    message = ...
    description = ...

class UnknownError(BrokerResponseError):
    errno = ...
    message = ...
    description = ...

class OffsetOutOfRangeError(BrokerResponseError):
    errno = ...
    message = ...
    description = ...

class CorruptRecordException(BrokerResponseError):
    errno = ...
    message = ...
    description = ...

InvalidMessageError = CorruptRecordException

class UnknownTopicOrPartitionError(BrokerResponseError):
    errno = ...
    message = ...
    description = ...
    retriable = ...
    invalid_metadata = ...

class InvalidFetchRequestError(BrokerResponseError):
    errno = ...
    message = ...
    description = ...

class LeaderNotAvailableError(BrokerResponseError):
    errno = ...
    message = ...
    description = ...
    retriable = ...
    invalid_metadata = ...

class NotLeaderForPartitionError(BrokerResponseError):
    errno = ...
    message = ...
    description = ...
    retriable = ...
    invalid_metadata = ...

class RequestTimedOutError(BrokerResponseError):
    errno = ...
    message = ...
    description = ...
    retriable = ...

class BrokerNotAvailableError(BrokerResponseError):
    errno = ...
    message = ...
    description = ...

class ReplicaNotAvailableError(BrokerResponseError):
    errno = ...
    message = ...
    description = ...

class MessageSizeTooLargeError(BrokerResponseError):
    errno = ...
    message = ...
    description = ...

class StaleControllerEpochError(BrokerResponseError):
    errno = ...
    message = ...
    description = ...

class OffsetMetadataTooLargeError(BrokerResponseError):
    errno = ...
    message = ...
    description = ...

class StaleLeaderEpochCodeError(BrokerResponseError):
    errno = ...
    message = ...

class GroupLoadInProgressError(BrokerResponseError):
    errno = ...
    message = ...
    description = ...
    retriable = ...

class GroupCoordinatorNotAvailableError(BrokerResponseError):
    errno = ...
    message = ...
    description = ...
    retriable = ...

class NotCoordinatorForGroupError(BrokerResponseError):
    errno = ...
    message = ...
    description = ...
    retriable = ...

class InvalidTopicError(BrokerResponseError):
    errno = ...
    message = ...
    description = ...

class RecordListTooLargeError(BrokerResponseError):
    errno = ...
    message = ...
    description = ...

class NotEnoughReplicasError(BrokerResponseError):
    errno = ...
    message = ...
    description = ...
    retriable = ...

class NotEnoughReplicasAfterAppendError(BrokerResponseError):
    errno = ...
    message = ...
    description = ...
    retriable = ...

class InvalidRequiredAcksError(BrokerResponseError):
    errno = ...
    message = ...
    description = ...

class IllegalGenerationError(BrokerResponseError):
    errno = ...
    message = ...
    description = ...

class InconsistentGroupProtocolError(BrokerResponseError):
    errno = ...
    message = ...
    description = ...

class InvalidGroupIdError(BrokerResponseError):
    errno = ...
    message = ...
    description = ...

class UnknownMemberIdError(BrokerResponseError):
    errno = ...
    message = ...
    description = ...

class InvalidSessionTimeoutError(BrokerResponseError):
    errno = ...
    message = ...
    description = ...

class RebalanceInProgressError(BrokerResponseError):
    errno = ...
    message = ...
    description = ...

class InvalidCommitOffsetSizeError(BrokerResponseError):
    errno = ...
    message = ...
    description = ...

class TopicAuthorizationFailedError(BrokerResponseError):
    errno = ...
    message = ...
    description = ...

class GroupAuthorizationFailedError(BrokerResponseError):
    errno = ...
    message = ...
    description = ...

class ClusterAuthorizationFailedError(BrokerResponseError):
    errno = ...
    message = ...
    description = ...

class InvalidTimestampError(BrokerResponseError):
    errno = ...
    message = ...
    description = ...

class UnsupportedSaslMechanismError(BrokerResponseError):
    errno = ...
    message = ...
    description = ...

class IllegalSaslStateError(BrokerResponseError):
    errno = ...
    message = ...
    description = ...

class UnsupportedVersionError(BrokerResponseError):
    errno = ...
    message = ...
    description = ...

class TopicAlreadyExistsError(BrokerResponseError):
    errno = ...
    message = ...
    description = ...

class InvalidPartitionsError(BrokerResponseError):
    errno = ...
    message = ...
    description = ...

class InvalidReplicationFactorError(BrokerResponseError):
    errno = ...
    message = ...
    description = ...

class InvalidReplicationAssignmentError(BrokerResponseError):
    errno = ...
    message = ...
    description = ...

class InvalidConfigurationError(BrokerResponseError):
    errno = ...
    message = ...
    description = ...

class NotControllerError(BrokerResponseError):
    errno = ...
    message = ...
    description = ...
    retriable = ...

class InvalidRequestError(BrokerResponseError):
    errno = ...
    message = ...
    description = ...

class UnsupportedForMessageFormatError(BrokerResponseError):
    errno = ...
    message = ...
    description = ...

class PolicyViolationError(BrokerResponseError):
    errno = ...
    message = ...
    description = ...

class SecurityDisabledError(BrokerResponseError):
    errno = ...
    message = ...
    description = ...

class NonEmptyGroupError(BrokerResponseError):
    errno = ...
    message = ...
    description = ...

class GroupIdNotFoundError(BrokerResponseError):
    errno = ...
    message = ...
    description = ...

class KafkaUnavailableError(KafkaError): ...
class KafkaTimeoutError(KafkaError): ...

class FailedPayloadsError(KafkaError):
    def __init__(self, payload, *args) -> None: ...

class KafkaConnectionError(KafkaError):
    retriable = ...
    invalid_metadata = ...

class ProtocolError(KafkaError): ...
class UnsupportedCodecError(KafkaError): ...
class KafkaConfigurationError(KafkaError): ...
class QuotaViolationError(KafkaError): ...

class AsyncProducerQueueFull(KafkaError):
    def __init__(self, failed_msgs, *args) -> None: ...

kafka_errors = ...

def for_code(error_code):  # -> type[BrokerResponseError]:
    ...
def check_error(response):  # -> None:
    ...

RETRY_BACKOFF_ERROR_TYPES = ...
RETRY_REFRESH_ERROR_TYPES = ...
RETRY_ERROR_TYPES = ...
