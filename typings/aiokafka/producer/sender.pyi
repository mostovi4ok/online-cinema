"""
This type stub file was generated by pyright.
"""

log = ...
BACKOFF_OVERRIDE = ...

class Sender:
    """Background processing abstraction for Producer. By all means just
    separates batch delivery and transaction management from the main Producer
    code
    """

    def __init__(
        self, client, *, acks, txn_manager, message_accumulator, retry_backoff_ms, linger_ms, request_timeout_ms
    ) -> None: ...
    async def start(self):  # -> None:
        ...
    @property
    def sender_task(self):  # -> Task[None] | None:
        ...
    async def close(self):  # -> None:
        ...

class BaseHandler:
    group = ...
    def __init__(self, sender) -> None: ...
    async def do(self, node_id):  # -> bool:
        ...
    def create_request(self): ...
    def handle_response(self, response): ...

class InitPIDHandler(BaseHandler):
    def create_request(self):  # -> InitProducerIdRequest_v0:
        ...
    def handle_response(self, resp):  # -> None:
        ...

class AddPartitionsToTxnHandler(BaseHandler):
    group = ...
    def __init__(self, sender, topic_partitions) -> None: ...
    def create_request(self):  # -> AddPartitionsToTxnRequest_v0:
        ...
    def handle_response(self, resp):  # -> float | None:
        ...

class AddOffsetsToTxnHandler(BaseHandler):
    group = ...
    def __init__(self, sender, group_id) -> None: ...
    def create_request(self):  # -> AddOffsetsToTxnRequest_v0:
        ...
    def handle_response(self, resp):  # -> None:
        ...

class TxnOffsetCommitHandler(BaseHandler):
    group = ...
    def __init__(self, sender, offsets, group_id) -> None: ...
    def create_request(self):  # -> TxnOffsetCommitRequest_v0:
        ...
    def handle_response(self, resp):  # -> None:
        ...

class EndTxnHandler(BaseHandler):
    group = ...
    def __init__(self, sender, commit_result) -> None: ...
    def create_request(self):  # -> EndTxnRequest_v0:
        ...
    def handle_response(self, resp):  # -> None:
        ...

class SendProduceReqHandler(BaseHandler):
    def __init__(self, sender, batches) -> None: ...
    def create_request(
        self,
    ):  # -> ProduceRequest_v0 | ProduceRequest_v1 | ProduceRequest_v2 | ProduceRequest_v3 | ProduceRequest_v4 | ProduceRequest_v5 | ProduceRequest_v6 | ProduceRequest_v7 | ProduceRequest_v8:
        ...
    async def do(self, node_id):  # -> None:
        ...
    def handle_response(self, response):  # -> None:
        ...
