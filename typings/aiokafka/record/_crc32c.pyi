"""
This type stub file was generated by pyright.
"""

from collections.abc import Iterable

"""Implementation of CRC-32C checksumming as in rfc3720 section B.4.
See http://en.wikipedia.org/wiki/Cyclic_redundancy_check for details on CRC-32C
This code is a manual python translation of c code generated by
pycrc 0.7.1 (http://www.tty1.net/pycrc/). Command line used:
'./pycrc.py --model=crc-32c --generate c --algorithm=table-driven'
"""
CRC_TABLE = ...
CRC_INIT = ...
_MASK = ...

def crc_update(crc: int, data: Iterable[int]) -> int:
    """Update CRC-32C checksum with data.

    Args:
        crc: 32-bit checksum to update as long.
        data: byte array, string or iterable over bytes.

    Returns:
        32-bit updated CRC-32C as long.

    """

def crc_finalize(crc: int) -> int:
    """Finalize CRC-32C checksum.
    This function should be called as last step of crc calculation.

    Args:
        crc: 32-bit checksum as long.

    Returns:
        finalized 32-bit checksum as long

    """

def crc(data: Iterable[int]) -> int:
    """Compute CRC-32C checksum of the data.

    Args:
        data: byte array, string or iterable over bytes.

    Returns:
        32-bit CRC-32C checksum of data as long.

    """
