"""
This type stub file was generated by pyright.
"""

from abc import ABC
from collections.abc import Sequence
from typing import NamedTuple

from clickhouse_connect.driver.context import BaseQueryContext
from clickhouse_connect.driver.insert import InsertContext
from clickhouse_connect.driver.query import QueryContext
from clickhouse_connect.driver.types import ByteSource

logger = ...
ch_read_formats = ...
ch_write_formats = ...

class TypeDef(NamedTuple):
    """
    Immutable tuple that contains all additional information needed to construct a particular ClickHouseType
    """

    wrappers: tuple = ...
    keys: tuple = ...
    values: tuple = ...
    @property
    def arg_str(self):  # -> str:
        ...

class ClickHouseType(ABC):
    """
    Base class for all ClickHouseType objects.
    """

    __slots__ = ...
    _name_suffix = ...
    encoding = ...
    np_type = ...
    nano_divisor = ...
    byte_size = ...
    valid_formats = ...
    python_type = ...
    base_type = ...
    def __init_subclass__(cls, registered: bool = ...):  # -> None:
        ...
    @classmethod
    def build(cls: type[ClickHouseType], type_def: TypeDef):  # -> ClickHouseType:
        ...
    @classmethod
    def read_format(cls, ctx: BaseQueryContext):  # -> str:
        ...
    @classmethod
    def write_format(cls, ctx: BaseQueryContext):  # -> str:
        ...
    def __init__(self, type_def: TypeDef) -> None:
        """
        Base class constructor that sets Nullable and LowCardinality wrappers
        :param type_def:  ClickHouseType base configuration parameters
        """

    def __eq__(self, other) -> bool: ...
    def __hash__(self) -> int: ...
    @property
    def name(self):  # -> str:
        ...
    def data_size(self, sample: Sequence) -> int: ...
    def write_column_prefix(self, dest: bytearray):  # -> None:
        """
        Prefix is primarily used is for the LowCardinality version (but see the JSON data type).  Because of the
        way the ClickHouse C++ code is written, this must be done before any data is written even if the
        LowCardinality column is within a container.  The only recognized low cardinality version is 1
        :param dest: The native protocol binary write buffer
        """

    def read_column_prefix(self, source: ByteSource):  # -> None:
        """
        Read the low cardinality version.  Like the write method, this has to happen immediately for container classes
        :param source: The native protocol binary read buffer
        :return: updated read pointer
        """

    def read_column(self, source: ByteSource, num_rows: int, ctx: QueryContext) -> Sequence:
        """
        Wrapping read method for all ClickHouseType data types.  Only overridden for container classes so that
         the LowCardinality version is read for the contained types
        :param source: Native protocol binary read buffer
        :param num_rows: Number of rows expected in the column
        :param ctx: QueryContext for query specific settings
        :return: The decoded column data as a sequence and the updated location pointer
        """

    def read_column_data(self, source: ByteSource, num_rows: int, ctx: QueryContext) -> Sequence:
        """
        Public read method for all ClickHouseType data type columns
        :param source: Native protocol binary read buffer
        :param num_rows: Number of rows expected in the column
        :param ctx: QueryContext for query specific settings
        :return: The decoded column plus the updated location pointer
        """

    def write_column(self, column: Sequence, dest: bytearray, ctx: InsertContext):  # -> None:
        """
        Wrapping write method for ClickHouseTypes.  Only overridden for container types that so that
        the write_native_prefix is done at the right time for contained types
        :param column: Column/sequence of Python values to write
        :param dest: Native binary write buffer
        :param ctx: Insert Context with insert specific settings
        """

    def write_column_data(self, column: Sequence, dest: bytearray, ctx: InsertContext):  # -> None:
        """
        Public native write method for ClickHouseTypes.  Delegates the actual write to either the LowCardinality
        write method or the _write_native_binary method of the type
        :param column: Sequence of Python data
        :param dest: Native binary write buffer
        :param ctx: Insert Context with insert specific settings
        """

EMPTY_TYPE_DEF = ...
NULLABLE_TYPE_DEF = ...
LC_TYPE_DEF = ...
type_map: dict[str, type[ClickHouseType]] = ...

class ArrayType(ClickHouseType, ABC, registered=False):
    """
    ClickHouse type that utilizes Python or Numpy arrays for fast reads and writes of binary data.
    arrays can only be used for ClickHouse types that can be translated into UInt64 (and smaller) integers
    or Float32/64
    """

    _signed = ...
    _array_type = ...
    _struct_type = ...
    valid_formats = ...
    python_type = int
    def __init_subclass__(cls, registered: bool = ...):  # -> None:
        ...

class UnsupportedType(ClickHouseType, ABC, registered=False):
    """
    Base class for ClickHouse types that can't be serialized/deserialized into Python types.
    Mostly useful just for DDL statements
    """

    def __init__(self, type_def: TypeDef) -> None: ...
