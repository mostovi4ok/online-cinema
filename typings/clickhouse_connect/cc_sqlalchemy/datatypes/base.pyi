"""
This type stub file was generated by pyright.
"""

from clickhouse_connect.datatypes.base import ClickHouseType, TypeDef

logger = ...

class ChSqlaType:
    """
    A SQLAlchemy TypeEngine that wraps a ClickHouseType.  We don't extend TypeEngine directly, instead all concrete
    subclasses will inherit from TypeEngine.
    """

    ch_type: ClickHouseType = ...
    generic_type: None
    _ch_type_cls = ...
    _instance = ...
    _instance_cache: dict[TypeDef, ChSqlaType] = ...
    def __init_subclass__(cls):  # -> None:
        """
        Registers ChSqla type in the type map and sets the underlying ClickHouseType class to use to initialize
        ChSqlaType instances
        """

    @classmethod
    def build(cls, type_def: TypeDef):  # -> ChSqlaType:
        """
        Factory function for building a ChSqlaType based on the type definition
        :param type_def: -- TypeDef tuple that defines arguments for this instance
        :return: Shared instance of a configured ChSqlaType
        """

    def __init__(self, type_def: TypeDef = ...) -> None:
        """
        Basic constructor that does nothing but set the wrapped ClickHouseType.  It is overridden in some cases
        to add specific SqlAlchemy behavior when constructing subclasses "by hand", in which case the type_def
        parameter is normally set to None and other keyword parameters used for construction
        :param type_def: TypeDef tuple used to build the underlying ClickHouseType.  This is normally populated by the
        parse_name function
        """

    @property
    def name(self):  # -> str:
        ...
    @name.setter
    def name(self, name):  # -> None:
        ...
    @property
    def nullable(self):  # -> bool:
        ...
    @property
    def low_card(self):  # -> bool:
        ...
    @staticmethod
    def result_processor():  # -> None:
        """
        Override for the SqlAlchemy TypeEngine result_processor method, which is used to convert row values to the
        correct Python type.  The core driver handles this automatically, so we always return None.
        """

class CaseInsensitiveDict(dict):
    def __setitem__(self, key, value):  # -> None:
        ...
    def __getitem__(self, item): ...

sqla_type_map: dict[str, type[ChSqlaType]] = ...
schema_types = ...

def sqla_type_from_name(name: str) -> ChSqlaType:
    """
    Factory function to convert a ClickHouse type name to the appropriate ChSqlaType
    :param name: Name returned from ClickHouse using Native protocol or WithNames format
    :return: ChSqlaType
    """
