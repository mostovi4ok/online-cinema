"""
This type stub file was generated by pyright.
"""

from collections.abc import Generator, MutableSequence, Sequence

from clickhouse_connect.driver.types import Closable

must_swap = ...
int_size = ...
low_card_version = ...
array_map = ...
decimal_prec = ...
if int_size == 2: ...
array_sizes = ...
np_date_types = ...

def array_type(size: int, signed: bool):  # -> str | None:
    """
    Determines the Python array.array code for the requested byte size
    :param size: byte size
    :param signed: whether int types should be signed or unsigned
    :return: Python array.array code
    """

def write_array(code: str, column: Sequence, dest: MutableSequence):  # -> None:
    """
    Write a column of native Python data matching the array.array code
    :param code: Python array.array code matching the column data type
    :param column: Column of native Python values
    :param dest: Destination byte buffer
    """

def write_uint64(value: int, dest: MutableSequence):  # -> None:
    """
    Write a single UInt64 value to a binary write buffer
    :param value: UInt64 value to write
    :param dest: Destination byte buffer
    """

def write_leb128(value: int, dest: MutableSequence):  # -> None:
    """
    Write a LEB128 encoded integer to a target binary buffer
    :param value: Integer value (positive only)
    :param dest: Target buffer
    """

def decimal_size(prec: int):  # -> Literal[32, 64, 128, 256]:
    """
    Determine the bit size of a ClickHouse or Python Decimal needed to store a value of the requested precision
    :param prec: Precision of the Decimal in total number of base 10 digits
    :return: Required bit size
    """

def unescape_identifier(x: str) -> str: ...
def dict_copy(source: dict = ..., update: dict | None = ...) -> dict: ...
def dict_add(source: dict, key: str, value: any) -> dict: ...
def empty_gen():  # -> Generator[Never, Any, None]:
    ...
def coerce_int(val: str | int | None) -> int: ...
def coerce_bool(val: str | bool | None):  # -> bool:
    ...

class SliceView(Sequence):
    """
    Provides a view into a sequence rather than copying.  Borrows liberally from
    https://gist.github.com/mathieucaroff/0cf094325fb5294fb54c6a577f05a2c1
    Also see the discussion on SO: https://stackoverflow.com/questions/3485475/can-i-create-a-view-on-a-python-list
    """

    slots = ...
    def __init__(self, source: Sequence, source_slice: slice | None = ...) -> None: ...
    def __len__(self):  # -> int:
        ...
    def __getitem__(self, i):  # -> SliceView:
        ...
    def __repr__(self):  # -> str:
        ...
    def __eq__(self, other) -> bool: ...

class StreamContext:
    """
    Wraps a generator and its "source" in a Context.  This ensures that the source will be "closed" even if the
    generator is not fully consumed or there is an exception during consumption
    """

    __slots__ = ...
    def __init__(self, source: Closable, gen: Generator) -> None: ...
    def __iter__(self):  # -> Self:
        ...
    def __next__(self): ...
    def __enter__(self):  # -> Self:
        ...
    def __exit__(self, exc_type, exc_val, exc_tb):  # -> None:
        ...
