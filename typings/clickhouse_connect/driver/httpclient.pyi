"""
This type stub file was generated by pyright.
"""

import io
from collections.abc import Generator, Sequence
from typing import Any, BinaryIO

from clickhouse_connect.driver.client import Client
from clickhouse_connect.driver.external import ExternalData
from clickhouse_connect.driver.insert import InsertContext
from clickhouse_connect.driver.summary import QuerySummary
from urllib3.poolmanager import PoolManager

logger = ...
columns_only_re = ...

class HttpClient(Client):
    params = ...
    valid_transport_settings = ...
    optional_transport_settings = ...
    _owns_pool_manager = ...
    def __init__(
        self,
        interface: str,
        host: str,
        port: int,
        username: str,
        password: str,
        database: str,
        compress: bool | str = ...,
        query_limit: int = ...,
        query_retries: int = ...,
        connect_timeout: int = ...,
        send_receive_timeout: int = ...,
        client_name: str | None = ...,
        verify: bool | str = ...,
        ca_cert: str | None = ...,
        client_cert: str | None = ...,
        client_cert_key: str | None = ...,
        session_id: str | None = ...,
        settings: dict[str, Any] | None = ...,
        pool_mgr: PoolManager | None = ...,
        http_proxy: str | None = ...,
        https_proxy: str | None = ...,
        server_host_name: str | None = ...,
        apply_server_timezone: str | bool | None = ...,
        show_clickhouse_errors: bool | None = ...,
        autogenerate_session_id: bool | None = ...,
    ) -> None:
        """
        Create an HTTP ClickHouse Connect client
        See clickhouse_connect.get_client for parameters
        """

    def set_client_setting(self, key, value):  # -> None:
        ...
    def get_client_setting(self, key) -> str | None: ...
    def data_insert(self, context: InsertContext) -> QuerySummary:
        """
        See BaseClient doc_string for this method
        """

    def raw_insert(
        self,
        table: str = ...,
        column_names: Sequence[str] | None = ...,
        insert_block: str | bytes | Generator[bytes, None, None] | BinaryIO = ...,
        settings: dict | None = ...,
        fmt: str | None = ...,
        compression: str | None = ...,
    ) -> QuerySummary:
        """
        See BaseClient doc_string for this method
        """

    def command(
        self,
        cmd,
        parameters: Sequence | dict[str, Any] | None = ...,
        data: str | bytes = ...,
        settings: dict | None = ...,
        use_database: int = ...,
        external_data: ExternalData | None = ...,
    ) -> str | int | Sequence[str] | QuerySummary:
        """
        See BaseClient doc_string for this method
        """

    def raw_query(
        self,
        query: str,
        parameters: Sequence | dict[str, Any] | None = ...,
        settings: dict[str, Any] | None = ...,
        fmt: str = ...,
        use_database: bool = ...,
        external_data: ExternalData | None = ...,
    ) -> bytes:
        """
        See BaseClient doc_string for this method
        """

    def raw_stream(
        self,
        query: str,
        parameters: Sequence | dict[str, Any] | None = ...,
        settings: dict[str, Any] | None = ...,
        fmt: str = ...,
        use_database: bool = ...,
        external_data: ExternalData | None = ...,
    ) -> io.IOBase:
        """
        See BaseClient doc_string for this method
        """

    def ping(self):  # -> bool:
        """
        See BaseClient doc_string for this method
        """

    def close(self):  # -> None:
        ...
