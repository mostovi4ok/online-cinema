"""
This type stub file was generated by pyright.
"""

import contextlib
import typing
from typing import Generic, TypeVar

V = TypeVar("V")
R = TypeVar("R")
Pargs = TypeVar("Pargs")
Pkwargs = TypeVar("Pkwargs")
if hasattr(typing, "ParamSpec"):
    P = typing.ParamSpec("P")

class _AgnosticContextManager(contextlib._GeneratorContextManager, Generic[R]):
    """Context manager that can decorate both async and sync functions.

    This is an overridden version of the contextlib._GeneratorContextManager
    class that will decorate async functions with an async context manager
    to end the span AFTER the entire async function coroutine finishes.

    Else it will report near zero spans durations for async functions.

    We are overriding the contextlib._GeneratorContextManager class as
    reimplementing it is a lot of code to maintain and this class (even if it's
    marked as protected) doesn't seems like to be evolving a lot.

    For more information, see:
    https://github.com/open-telemetry/opentelemetry-python/pull/3633
    """

    def __enter__(self) -> R:
        """Reimplementing __enter__ to avoid the type error.

        The original __enter__ method returns Any type, but we want to return R.
        """

    def __call__(self, func: V) -> V: ...
