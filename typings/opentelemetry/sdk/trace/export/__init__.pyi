"""
This type stub file was generated by pyright.
"""

import typing
from enum import Enum

from opentelemetry.context import Context
from opentelemetry.sdk.trace import ReadableSpan, Span, SpanProcessor

_DEFAULT_SCHEDULE_DELAY_MILLIS = ...
_DEFAULT_MAX_EXPORT_BATCH_SIZE = ...
_DEFAULT_EXPORT_TIMEOUT_MILLIS = ...
_DEFAULT_MAX_QUEUE_SIZE = ...
_ENV_VAR_INT_VALUE_ERROR_MESSAGE = ...
logger = ...

class SpanExportResult(Enum):
    SUCCESS = ...
    FAILURE = ...

class SpanExporter:
    """Interface for exporting spans.

    Interface to be implemented by services that want to export spans recorded
    in their own format.

    To export data this MUST be registered to the :class`opentelemetry.sdk.trace.Tracer` using a
    `SimpleSpanProcessor` or a `BatchSpanProcessor`.
    """

    def export(self, spans: typing.Sequence[ReadableSpan]) -> SpanExportResult:
        """Exports a batch of telemetry data.

        Args:
            spans: The list of `opentelemetry.trace.Span` objects to be exported

        Returns:
            The result of the export

        """

    def shutdown(self) -> None:
        """Shuts down the exporter.

        Called when the SDK is shut down.
        """

    def force_flush(self, timeout_millis: int = ...) -> bool:
        """Hint to ensure that the export of any spans the exporter has received
        prior to the call to ForceFlush SHOULD be completed as soon as possible, preferably
        before returning from this method.
        """

class SimpleSpanProcessor(SpanProcessor):
    """Simple SpanProcessor implementation.

    SimpleSpanProcessor is an implementation of `SpanProcessor` that
    passes ended spans directly to the configured `SpanExporter`.
    """

    def __init__(self, span_exporter: SpanExporter) -> None: ...
    def on_start(self, span: Span, parent_context: Context | None = ...) -> None: ...
    def on_end(self, span: ReadableSpan) -> None: ...
    def shutdown(self) -> None: ...
    def force_flush(self, timeout_millis: int = ...) -> bool: ...

class _FlushRequest:
    """Represents a request for the BatchSpanProcessor to flush spans."""

    __slots__ = ...
    def __init__(self) -> None: ...

_BSP_RESET_ONCE = ...

class BatchSpanProcessor(SpanProcessor):
    """Batch span processor implementation.

    `BatchSpanProcessor` is an implementation of `SpanProcessor` that
    batches ended spans and pushes them to the configured `SpanExporter`.

    `BatchSpanProcessor` is configurable with the following environment
    variables which correspond to constructor parameters:

    - :envvar:`OTEL_BSP_SCHEDULE_DELAY`
    - :envvar:`OTEL_BSP_MAX_QUEUE_SIZE`
    - :envvar:`OTEL_BSP_MAX_EXPORT_BATCH_SIZE`
    - :envvar:`OTEL_BSP_EXPORT_TIMEOUT`
    """

    def __init__(
        self,
        span_exporter: SpanExporter,
        max_queue_size: int = ...,
        schedule_delay_millis: float = ...,
        max_export_batch_size: int = ...,
        export_timeout_millis: float = ...,
    ) -> None: ...
    def on_start(self, span: Span, parent_context: Context | None = ...) -> None: ...
    def on_end(self, span: ReadableSpan) -> None: ...
    def worker(self):  # -> None:
        ...
    def force_flush(self, timeout_millis: int = ...) -> bool: ...
    def shutdown(self) -> None: ...

class ConsoleSpanExporter(SpanExporter):
    """Implementation of :class:`SpanExporter` that prints spans to the
    console.

    This class can be used for diagnostic purposes. It prints the exported
    spans to the console STDOUT.
    """

    def __init__(
        self,
        service_name: str | None = ...,
        out: typing.IO = ...,
        formatter: typing.Callable[[ReadableSpan], str] = ...,
    ) -> None: ...
    def export(self, spans: typing.Sequence[ReadableSpan]) -> SpanExportResult: ...
    def force_flush(self, timeout_millis: int = ...) -> bool: ...
