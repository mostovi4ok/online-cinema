"""
This type stub file was generated by pyright.
"""

import abc
import typing
from types import ModuleType

import psutil as psutil_module
from opentelemetry.attributes import BoundedAttributes
from opentelemetry.util.types import AttributeValue

"""
This package implements `OpenTelemetry Resources
<https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/resource/sdk.md#resource-sdk>`_:

    *A Resource is an immutable representation of the entity producing
    telemetry. For example, a process producing telemetry that is running in
    a container on Kubernetes has a Pod name, it is in a namespace and
    possibly is part of a Deployment which also has a name. All three of
    these attributes can be included in the Resource.*

Resource objects are created with `Resource.create`, which accepts attributes
(key-values). Resources should NOT be created via constructor, and working with
`Resource` objects should only be done via the Resource API methods. Resource
attributes can also be passed at process invocation in the
:envvar:`OTEL_RESOURCE_ATTRIBUTES` environment variable. You should register
your resource with the  `opentelemetry.sdk.trace.TracerProvider` by passing
them into their constructors. The `Resource` passed to a provider is available
to the exporter, which can send on this information as it sees fit.

.. code-block:: python

    trace.set_tracer_provider(
        TracerProvider(
            resource=Resource.create({
                "service.name": "shoppingcart",
                "service.instance.id": "instance-12",
            }),
        ),
    )
    print(trace.get_tracer_provider().resource.attributes)

    {'telemetry.sdk.language': 'python',
    'telemetry.sdk.name': 'opentelemetry',
    'telemetry.sdk.version': '0.13.dev0',
    'service.name': 'shoppingcart',
    'service.instance.id': 'instance-12'}

Note that the OpenTelemetry project documents certain `"standard attributes"
<https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/resource/semantic_conventions/README.md>`_
that have prescribed semantic meanings, for example ``service.name`` in the
above example.
 """
psutil: ModuleType | None = ...
pustil = psutil_module
LabelValue = AttributeValue
Attributes: typing.TypeAlias = typing.Mapping[str, LabelValue]
logger = ...
CLOUD_PROVIDER = ...
CLOUD_ACCOUNT_ID = ...
CLOUD_REGION = ...
CLOUD_AVAILABILITY_ZONE = ...
CONTAINER_NAME = ...
CONTAINER_ID = ...
CONTAINER_IMAGE_NAME = ...
CONTAINER_IMAGE_TAG = ...
DEPLOYMENT_ENVIRONMENT = ...
FAAS_NAME = ...
FAAS_ID = ...
FAAS_VERSION = ...
FAAS_INSTANCE = ...
HOST_NAME = ...
HOST_TYPE = ...
HOST_IMAGE_NAME = ...
HOST_IMAGE_ID = ...
HOST_IMAGE_VERSION = ...
KUBERNETES_CLUSTER_NAME = ...
KUBERNETES_NAMESPACE_NAME = ...
KUBERNETES_POD_UID = ...
KUBERNETES_POD_NAME = ...
KUBERNETES_CONTAINER_NAME = ...
KUBERNETES_REPLICA_SET_UID = ...
KUBERNETES_REPLICA_SET_NAME = ...
KUBERNETES_DEPLOYMENT_UID = ...
KUBERNETES_DEPLOYMENT_NAME = ...
KUBERNETES_STATEFUL_SET_UID = ...
KUBERNETES_STATEFUL_SET_NAME = ...
KUBERNETES_DAEMON_SET_UID = ...
KUBERNETES_DAEMON_SET_NAME = ...
KUBERNETES_JOB_UID = ...
KUBERNETES_JOB_NAME = ...
KUBERNETES_CRON_JOB_UID = ...
KUBERNETES_CRON_JOB_NAME = ...
OS_DESCRIPTION = ...
OS_TYPE = ...
OS_VERSION = ...
PROCESS_PID = ...
PROCESS_PARENT_PID = ...
PROCESS_EXECUTABLE_NAME = ...
PROCESS_EXECUTABLE_PATH = ...
PROCESS_COMMAND = ...
PROCESS_COMMAND_LINE = ...
PROCESS_COMMAND_ARGS = ...
PROCESS_OWNER = ...
PROCESS_RUNTIME_NAME = ...
PROCESS_RUNTIME_VERSION = ...
PROCESS_RUNTIME_DESCRIPTION = ...
SERVICE_NAME = ...
SERVICE_NAMESPACE = ...
SERVICE_INSTANCE_ID = ...
SERVICE_VERSION = ...
TELEMETRY_SDK_NAME = ...
TELEMETRY_SDK_VERSION = ...
TELEMETRY_AUTO_VERSION = ...
TELEMETRY_SDK_LANGUAGE = ...
_OPENTELEMETRY_SDK_VERSION: str = ...

class Resource:
    """A Resource is an immutable representation of the entity producing telemetry as Attributes."""

    _attributes: BoundedAttributes
    _schema_url: str
    def __init__(self, attributes: Attributes, schema_url: str | None = ...) -> None: ...
    @staticmethod
    def create(attributes: Attributes | None = ..., schema_url: str | None = ...) -> Resource:
        """Creates a new `Resource` from attributes.

        Args:
            attributes: Optional zero or more key-value pairs.
            schema_url: Optional URL pointing to the schema

        Returns:
            The newly-created Resource.

        """

    @staticmethod
    def get_empty() -> Resource: ...
    @property
    def attributes(self) -> Attributes: ...
    @property
    def schema_url(self) -> str: ...
    def merge(self, other: Resource) -> Resource:
        """Merges this resource and an updating resource into a new `Resource`.

        If a key exists on both the old and updating resource, the value of the
        updating resource will override the old resource value.

        The updating resource's `schema_url` will be used only if the old
        `schema_url` is empty. Attempting to merge two resources with
        different, non-empty values for `schema_url` will result in an error
        and return the old resource.

        Args:
            other: The other resource to be merged.

        Returns:
            The newly-created Resource.

        """

    def __eq__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def to_json(self, indent: int = ...) -> str: ...

_EMPTY_RESOURCE = ...
_DEFAULT_RESOURCE = ...

class ResourceDetector(abc.ABC):
    def __init__(self, raise_on_error: bool = ...) -> None: ...
    @abc.abstractmethod
    def detect(self) -> Resource: ...

class OTELResourceDetector(ResourceDetector):
    def detect(self) -> Resource: ...

class ProcessResourceDetector(ResourceDetector):
    def detect(self) -> Resource: ...

class OsResourceDetector(ResourceDetector):
    """Detect os resources based on `Operating System conventions <https://opentelemetry.io/docs/specs/semconv/resource/os/>`_."""

    def detect(self) -> Resource:
        """Returns a resource with with ``os.type`` and ``os.version``.

        Python's platform library
        ~~~~~~~~~~~~~~~~~~~~~~~~~

        To grab this information, Python's ``platform`` does not return what a
        user might expect it to. Below is a breakdown of its return values in
        different operating systems.

        .. code-block:: python
            :caption: Linux

            >>> platform.system()
            'Linux'
            >>> platform.release()
            '6.5.0-35-generic'
            >>> platform.version()
            '#35~22.04.1-Ubuntu SMP PREEMPT_DYNAMIC Tue May  7 09:00:52 UTC 2'

        .. code-block:: python
            :caption: MacOS

            >>> platform.system()
            'Darwin'
            >>> platform.release()
            '23.0.0'
            >>> platform.version()
            'Darwin Kernel Version 23.0.0: Fri Sep 15 14:42:57 PDT 2023; root:xnu-10002.1.13~1/RELEASE_ARM64_T8112'

        .. code-block:: python
            :caption: Windows

            >>> platform.system()
            'Windows'
            >>> platform.release()
            '2022Server'
            >>> platform.version()
            '10.0.20348'

        .. code-block:: python
            :caption: FreeBSD

            >>> platform.system()
            'FreeBSD'
            >>> platform.release()
            '14.1-RELEASE'
            >>> platform.version()
            'FreeBSD 14.1-RELEASE releng/14.1-n267679-10e31f0946d8 GENERIC'

        .. code-block:: python
            :caption: Solaris

            >>> platform.system()
            'SunOS'
            >>> platform.release()
            '5.11'
            >>> platform.version()
            '11.4.0.15.0'

        """

def get_aggregated_resources(
    detectors: list[ResourceDetector], initial_resource: Resource | None = ..., timeout: int = ...
) -> Resource:
    """Retrieves resources from detectors in the order that they were passed

    :param detectors: List of resources in order of priority
    :param initial_resource: Static resource. This has highest priority
    :param timeout: Number of seconds to wait for each detector to return
    :return:
    """
