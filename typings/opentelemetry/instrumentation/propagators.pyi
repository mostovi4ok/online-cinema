"""
This type stub file was generated by pyright.
"""

from abc import ABC, abstractmethod

from opentelemetry.context.context import Context
from opentelemetry.propagators import textmap

"""
This module implements experimental propagators to inject trace context
into response carriers. This is useful for server side frameworks that start traces
when server requests and want to share the trace context with the client so the
client can add its spans to the same trace.

This is part of an upcoming W3C spec and will eventually make it to the Otel spec.

https://w3c.github.io/trace-context/#trace-context-http-response-headers-format
"""
_HTTP_HEADER_ACCESS_CONTROL_EXPOSE_HEADERS = ...
_RESPONSE_PROPAGATOR = ...

def get_global_response_propagator():  # -> None:
    ...
def set_global_response_propagator(propagator):  # -> None:
    ...

class Setter(ABC):
    @abstractmethod
    def set(self, carrier, key, value):  # -> None:
        """Inject the provided key value pair in carrier."""
        ...

class DictHeaderSetter(Setter):
    def set(self, carrier, key, value):  # -> None:
        ...

class FuncSetter(Setter):
    """FuncSetter converts a function into a valid Setter. Any function that
    can set values in a carrier can be converted into a Setter by using
    FuncSetter. This is useful when injecting trace context into non-dict
    objects such HTTP Response objects for different framework.

    For example, it can be used to create a setter for Falcon response object
    as:

        setter = FuncSetter(falcon.api.Response.append_header)

    and then used with the propagator as:

        propagator.inject(falcon_response, setter=setter)

    This would essentially make the propagator call `falcon_response.append_header(key, value)`
    """

    def __init__(self, func) -> None: ...
    def set(self, carrier, key, value):  # -> None:
        ...

default_setter = ...

class ResponsePropagator(ABC):
    @abstractmethod
    def inject(self, carrier: textmap.CarrierT, context: Context | None = ..., setter: textmap.Setter = ...) -> None:
        """Injects SpanContext into the HTTP response carrier."""
        ...

class TraceResponsePropagator(ResponsePropagator):
    """Experimental propagator that injects tracecontext into HTTP responses."""

    def inject(self, carrier: textmap.CarrierT, context: Context | None = ..., setter: textmap.Setter = ...) -> None:
        """Injects SpanContext into the HTTP response carrier."""
