"""
This type stub file was generated by pyright.
"""

import typing

from deprecated import deprecated
from opentelemetry.context.context import Context
from opentelemetry.propagators import textmap

logger = ...

class CompositePropagator(textmap.TextMapPropagator):
    """CompositePropagator provides a mechanism for combining multiple
    propagators into a single one.

    Args:
        propagators: the list of propagators to use

    """

    def __init__(self, propagators: typing.Sequence[textmap.TextMapPropagator]) -> None: ...
    def extract(
        self, carrier: textmap.CarrierT, context: Context | None = ..., getter: textmap.Getter[textmap.CarrierT] = ...
    ) -> Context:
        """Run each of the configured propagators with the given context and carrier.
        Propagators are run in the order they are configured, if multiple
        propagators write the same context key, the propagator later in the list
        will override previous propagators.

        See `opentelemetry.propagators.textmap.TextMapPropagator.extract`
        """

    def inject(
        self, carrier: textmap.CarrierT, context: Context | None = ..., setter: textmap.Setter[textmap.CarrierT] = ...
    ) -> None:
        """Run each of the configured propagators with the given context and carrier.
        Propagators are run in the order they are configured, if multiple
        propagators write the same carrier key, the propagator later in the list
        will override previous propagators.

        See `opentelemetry.propagators.textmap.TextMapPropagator.inject`
        """

    @property
    def fields(self) -> set[str]:
        """Returns a set with the fields set in `inject`.

        See
        `opentelemetry.propagators.textmap.TextMapPropagator.fields`
        """

@deprecated(version="1.2.0", reason="You should use CompositePropagator")
class CompositeHTTPPropagator(CompositePropagator):
    """CompositeHTTPPropagator provides a mechanism for combining multiple
    propagators into a single one.
    """
