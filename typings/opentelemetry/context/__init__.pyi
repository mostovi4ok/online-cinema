"""
This type stub file was generated by pyright.
"""

from opentelemetry.context.context import Context

logger = ...
_RUNTIME_CONTEXT = ...

def create_key(keyname: str) -> str:
    """To allow cross-cutting concern to control access to their local state,
    the RuntimeContext API provides a function which takes a keyname as input,
    and returns a unique key.

    Args:
        keyname: The key name is for debugging purposes and is not required to be unique.

    Returns:
        A unique string representing the newly created key.

    """

def get_value(key: str, context: Context | None = ...) -> object:
    """To access the local state of a concern, the RuntimeContext API
    provides a function which takes a context and a key as input,
    and returns a value.

    Args:
        key: The key of the value to retrieve.
        context: The context from which to retrieve the value, if None, the current context is used.

    Returns:
        The value associated with the key.

    """

def set_value(key: str, value: object, context: Context | None = ...) -> Context:
    """To record the local state of a cross-cutting concern, the
    RuntimeContext API provides a function which takes a context, a
    key, and a value as input, and returns an updated context
    which contains the new value.

    Args:
        key: The key of the entry to set.
        value: The value of the entry to set.
        context: The context to copy, if None, the current context is used.

    Returns:
        A new `Context` containing the value set.

    """

def get_current() -> Context:
    """To access the context associated with program execution,
    the Context API provides a function which takes no arguments
    and returns a Context.

    Returns:
        The current `Context` object.

    """

def attach(context: Context) -> object:
    """Associates a Context with the caller's current execution unit. Returns
    a token that can be used to restore the previous Context.

    Args:
        context: The Context to set as current.

    Returns:
        A token that can be used with `detach` to reset the context.

    """

def detach(token: object) -> None:
    """Resets the Context associated with the caller's current execution unit
    to the value it had before attaching a specified Context.

    Args:
        token: The Token that was returned by a previous call to attach a Context.

    """

_SUPPRESS_INSTRUMENTATION_KEY = ...
_SUPPRESS_HTTP_INSTRUMENTATION_KEY = ...
__all__ = ["Context", "attach", "create_key", "detach", "get_current", "get_value", "set_value"]
