"""
This type stub file was generated by pyright.
"""

from collections.abc import Callable
from typing import Any

class AuthConfig:
    _verified_token = ...
    _token = ...
    _token_location = ...
    _secret_key = ...
    _public_key = ...
    _private_key = ...
    _algorithm = ...
    _decode_algorithms = ...
    _decode_leeway = ...
    _encode_issuer = ...
    _decode_issuer = ...
    _decode_audience = ...
    _denylist_enabled = ...
    _denylist_token_checks = ...
    _header_name = ...
    _header_type = ...
    _token_in_denylist_callback = ...
    _access_token_expires = ...
    _refresh_token_expires = ...
    _access_cookie_key = ...
    _refresh_cookie_key = ...
    _access_cookie_path = ...
    _refresh_cookie_path = ...
    _cookie_max_age = ...
    _cookie_domain = ...
    _cookie_secure = ...
    _cookie_samesite = ...
    _cookie_csrf_protect = ...
    _access_csrf_cookie_key = ...
    _refresh_csrf_cookie_key = ...
    _access_csrf_cookie_path = ...
    _refresh_csrf_cookie_path = ...
    _access_csrf_header_name = ...
    _refresh_csrf_header_name = ...
    _csrf_methods = ...
    @property
    def jwt_in_cookies(self) -> bool: ...
    @property
    def jwt_in_headers(self) -> bool: ...
    @classmethod
    def load_config(cls, settings: Any) -> None: ...
    @classmethod
    def token_in_denylist_loader(cls, callback: Callable[..., bool]):  # -> None:
        """
        This decorator sets the callback function that will be called when
        a protected endpoint is accessed and will check if the JWT has been
        been revoked. By default, this callback is not used.

        *HINT*: The callback must be a function that takes decrypted_token argument,
        args for object AuthJWT and this is not used, decrypted_token is decode
        JWT (python dictionary) and returns *`True`* if the token has been deny,
        or *`False`* otherwise.
        """
