"""
This type stub file was generated by pyright.
"""

import inspect
from collections.abc import Sequence
from typing import Any

from debug_toolbar import _stubs as stubs
from django.http import QueryDict
from django.template import Node
from django.utils.safestring import SafeString

_local_data = ...

def tidy_stacktrace(stack: list[stubs.InspectStack]) -> stubs.TidyStackTrace:
    """
    Clean up stacktrace and remove all entries that are excluded by the
    HIDE_IN_STACKTRACES setting.

    ``stack`` should be a list of frame tuples from ``inspect.stack()`` or
    ``debug_toolbar.utils.get_stack()``.
    """

def render_stacktrace(trace: stubs.TidyStackTrace) -> SafeString: ...
def get_template_info() -> dict[str, Any] | None: ...
def get_template_context(node: Node, context: stubs.RequestContext, context_lines: int = ...) -> dict[str, Any]: ...
def get_template_source_from_exception_info(
    node: Node, context: stubs.RequestContext
) -> tuple[int, list[tuple[int, str]], str]: ...
def get_name_from_obj(obj: Any) -> str:
    """Get the best name as `str` from a view or a object."""

def getframeinfo(frame: Any, context: int = ...) -> inspect.Traceback:
    """
    Get information about a frame or traceback object.

    A tuple of five things is returned: the filename, the line number of
    the current line, the function name, a list of lines of context from
    the source code, and the index of the current line within that list.
    The optional second argument specifies the number of lines of context
    to return, which are centered around the current line.

    This originally comes from ``inspect`` but is modified to handle issues
    with ``findsource()``.
    """

def get_sorted_request_variable(variable: dict[str, Any] | QueryDict) -> dict[str, list[tuple[str, Any]] | Any]:
    """
    Get a data structure for showing a sorted list of variables from the
    request data.
    """

def get_stack(context=...) -> list[stubs.InspectStack]:
    """
    Get a list of records for a frame and all higher (calling) frames.

    Each record contains a frame object, filename, line number, function
    name, a list of lines of context, and index within the context.

    Modified version of ``inspect.stack()`` which calls our own ``getframeinfo()``
    """

class _StackTraceRecorder:
    pretty_printer = ...
    def __init__(self) -> None: ...
    def get_source_file(self, frame):  # -> tuple[Any | str, bool]:
        ...
    def get_stack_trace(
        self, *, excluded_modules: Sequence[str] | None = ..., include_locals: bool = ..., skip: int = ...
    ):  # -> list[Any]:
        ...

def get_stack_trace(*, skip=...):  # -> list[Any] | Any:
    """
    Return a processed stack trace for the current call stack.

    If the ``ENABLE_STACKTRACES`` setting is False, return an empty :class:`list`.
    Otherwise return a :class:`list` of processed stack frame tuples (file name, line
    number, function name, source line, frame locals) for the current call stack.  The
    first entry in the list will be for the bottom of the stack and the last entry will
    be for the top of the stack.

    ``skip`` is an :class:`int` indicating the number of stack frames above the frame
    for this function to omit from the stack trace.  The default value of ``0`` means
    that the entry for the caller of this function will be the last entry in the
    returned stack trace.
    """

def clear_stack_trace_caches():  # -> None:
    ...

_HTML_TYPES = ...

def is_processable_html_response(response):  # -> bool:
    ...
