"""
This type stub file was generated by pyright.
"""

from functools import cache
from typing import Any

from django.urls import URLResolver

"""
The main DebugToolbar class that loads and renders the Toolbar.
"""

class DebugToolbar:
    _created = ...
    def __init__(self, request, get_response) -> None: ...
    @property
    def panels(self):  # -> list[Any]:
        """
        Get a list of all available panels.
        """

    @property
    def enabled_panels(self):  # -> list[Any]:
        """
        Get a list of panels enabled for the current request.
        """

    def get_panel_by_id(self, panel_id):
        """
        Get the panel with the given id, which is the class name by default.
        """

    def render_toolbar(self):  # -> SafeText:
        """
        Renders the overall Toolbar with panels inside.
        """

    def should_render_panels(
        self,
    ):  # -> set[str] | str | int | bool | tuple[str, str, str, str, str, str, str, str, str, str] | tuple[str, str] | list[Any]:
        """Determine whether the panels should be rendered during the request

        If False, the panels will be loaded via Ajax.
        """

    _store = ...
    def store(self):  # -> None:
        ...
    @classmethod
    def fetch(cls, store_id):  # -> None:
        ...

    _panel_classes = ...
    @classmethod
    def get_panel_classes(cls):  # -> list[Any]:
        ...

    _urlpatterns = ...
    @classmethod
    def get_urls(cls):  # -> list[URLPattern] | Any:
        ...
    @classmethod
    def is_toolbar_request(cls, request):  # -> bool | list[str]:
        """
        Determine if the request is for a DebugToolbar view.
        """

    @staticmethod
    @cache
    def get_observe_request():  # -> Any | set[str] | int | bool | tuple[str, str, str, str, str, str, str, str, str, str] | tuple[str, str] | list[Any] | None:
        ...

def observe_request(request):  # -> Literal[True]:
    """
    Determine whether to update the toolbar from a client side request.
    """

def debug_toolbar_urls(prefix: Any = ...) -> list[Any] | list[URLResolver]:
    """
    Return a URL pattern for serving toolbar in debug mode.

    from django.conf import settings
    from debug_toolbar.toolbar import debug_toolbar_urls

    urlpatterns = [
        # ... the rest of your URLconf goes here ...
    ] + debug_toolbar_urls()
    """
