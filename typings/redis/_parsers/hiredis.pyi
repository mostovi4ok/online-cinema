"""
This type stub file was generated by pyright.
"""

import sys
from collections.abc import Callable

from redis.compat import TypedDict

from ..typing import EncodableT
from .base import AsyncBaseParser, BaseParser

if sys.version_info.major >= 3 and sys.version_info.minor >= 11: ...
else: ...
NOT_ENOUGH_DATA = ...

class _HiredisReaderArgs(TypedDict, total=False):
    protocolError: Callable[[str], Exception]
    replyError: Callable[[str], Exception]
    encoding: str | None
    errors: str | None

class _HiredisParser(BaseParser):
    """Parser class for connections using Hiredis"""

    def __init__(self, socket_read_size) -> None: ...
    def __del__(self):  # -> None:
        ...
    def on_connect(self, connection, **kwargs):  # -> None:
        ...
    def on_disconnect(self):  # -> None:
        ...
    def can_read(self, timeout):  # -> bool:
        ...
    def read_from_socket(self, timeout=..., raise_on_timeout=...):  # -> bool:
        ...
    def read_response(self, disable_decoding=...):  # -> object | list[Any]:
        ...

class _AsyncHiredisParser(AsyncBaseParser):
    """Async implementation of parser class for connections using Hiredis"""

    __slots__ = ...
    def __init__(self, socket_read_size: int) -> None: ...
    def on_connect(self, connection):  # -> None:
        ...
    def on_disconnect(self):  # -> None:
        ...
    async def can_read_destructive(self):  # -> bool:
        ...
    async def read_from_socket(self):  # -> Literal[True]:
        ...
    async def read_response(self, disable_decoding: bool = ...) -> EncodableT | list[EncodableT]: ...
