"""
This type stub file was generated by pyright.
"""

from redis.typing import KeysT, KeyT

def list_or_args(keys: KeysT, args: tuple[KeyT, ...]) -> list[KeyT]: ...
def nativestr(x):  # -> str | None:
    """Return the decoded binary string, or a string, depending on type."""

def delist(x):  # -> list[str | Any | None]:
    """Given a list of binaries, return the stringified version."""

def parse_to_list(response):  # -> list[Any]:
    """Optimistically parse the response to a list."""

def parse_list_to_dict(response):  # -> dict[Any, Any]:
    ...
def parse_to_dict(response):  # -> dict[Any, Any]:
    ...
def random_string(length=...):  # -> str:
    """
    Returns a random N character long string.
    """

def quote_string(v):  # -> str:
    """
    RedisGraph strings must be quoted,
    quote_string wraps given v with quotes incase
    v is a string.
    """

def decode_dict_keys(obj):
    """Decode the keys of the given dictionary with utf-8."""

def stringify_param_value(value):  # -> str | LiteralString:
    """
    Turn a parameter value into a string suitable for the params header of
    a Cypher command.
    You may pass any value that would be accepted by `json.dumps()`.

    Ways in which output differs from that of `str()`:
        * Strings are quoted.
        * None --> "null".
        * In dictionaries, keys are _not_ quoted.

    :param value: The parameter value to be turned into a string.
    :return: string
    """

def get_protocol_version(client):  # -> None:
    ...
