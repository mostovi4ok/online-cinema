"""
This type stub file was generated by pyright.
"""

from collections.abc import Awaitable, Iterable, Mapping
from datetime import datetime, timedelta
from typing import TYPE_CHECKING, Any, TypeAlias, TypeVar

from redis._parsers import Encoder
from redis.asyncio.connection import ConnectionPool as AsyncConnectionPool
from redis.compat import Protocol
from redis.connection import ConnectionPool

if TYPE_CHECKING: ...
Number: TypeAlias = int | float
EncodedT: TypeAlias = bytes | memoryview
DecodedT: TypeAlias = str | int | float
EncodableT: TypeAlias = EncodedT | DecodedT
AbsExpiryT: TypeAlias = int | datetime
ExpiryT: TypeAlias = int | timedelta
ZScoreBoundT: TypeAlias = float | str
BitfieldOffsetT: TypeAlias = int | str
_StringLikeT: TypeAlias = bytes | str | memoryview
KeyT = _StringLikeT
PatternT = _StringLikeT
FieldT = EncodableT
KeysT: TypeAlias = KeyT | Iterable[KeyT]
ResponseT: TypeAlias = Awaitable[Any] | Any
ChannelT = _StringLikeT
GroupT = _StringLikeT
ConsumerT = _StringLikeT
StreamIdT: TypeAlias = int | _StringLikeT
ScriptTextT = _StringLikeT
TimeoutSecT: TypeAlias = int | float | _StringLikeT
AnyKeyT = TypeVar("AnyKeyT", bytes, str, memoryview)
AnyFieldT = TypeVar("AnyFieldT", bytes, str, memoryview)
AnyChannelT = TypeVar("AnyChannelT", bytes, str, memoryview)
ExceptionMappingT: TypeAlias = Mapping[str, type[Exception] | Mapping[str, type[Exception]]]

class CommandsProtocol(Protocol):
    connection_pool: AsyncConnectionPool | ConnectionPool
    def execute_command(self, *args, **options):  # -> None:
        ...

class ClusterCommandsProtocol(CommandsProtocol, Protocol):
    encoder: Encoder
    def execute_command(self, *args, **options) -> Any | Awaitable: ...
