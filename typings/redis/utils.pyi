"""
This type stub file was generated by pyright.
"""

from collections.abc import Mapping
from contextlib import contextmanager
from typing import Any

HIREDIS_AVAILABLE = ...
HIREDIS_PACK_AVAILABLE = ...
SSL_AVAILABLE = ...
CRYPTOGRAPHY_AVAILABLE = ...

def from_url(url, **kwargs):  # -> Redis:
    """
    Returns an active Redis client generated from the given database URL.

    Will attempt to extract the database id from the path url fragment, if
    none is provided.
    """

@contextmanager
def pipeline(redis_obj):  # -> Generator[Any, Any, None]:
    ...
def str_if_bytes(value: str | bytes) -> str: ...
def safe_str(value):  # -> str:
    ...
def dict_merge(*dicts: Mapping[str, Any]) -> dict[str, Any]:
    """
    Merge all provided dicts into 1 dict.
    *dicts : `dict`
        dictionaries to merge
    """

def list_keys_to_dict(key_list, callback):  # -> dict[Any, Any | None]:
    ...
def merge_result(command, res):  # -> list[Any]:
    """
    Merge all items in `res` into a list.

    This command is used when sending a command to multiple nodes
    and the result from each node should be merged into a single list.

    res : 'dict'
    """

def warn_deprecated(name, reason=..., version=..., stacklevel=...):  # -> None:
    ...
def deprecated_function(
    reason=..., version=..., name=...
):  # -> Callable[..., _Wrapped[Callable[..., Any], Any, Callable[..., Any], Any]]:
    """
    Decorator to mark a function as deprecated.
    """

def get_lib_version():  # -> str:
    ...
def format_error_message(host_error: str, exception: BaseException) -> str: ...
