"""
This type stub file was generated by pyright.
"""

from abc import abstractmethod
from typing import Generic, TypeVar

from pydantic.main import BaseModel

CursorResultType = TypeVar("CursorResultType")

class BaseCursorQuery(Generic[CursorResultType]):
    """
    BaseCursorQuery class. Wrapper over AsyncIOMotorCursor,
    which parse result with model
    """

    cursor = ...
    lazy_parse = ...
    @abstractmethod
    def get_projection_model(self) -> type[BaseModel] | None: ...
    @property
    @abstractmethod
    def motor_cursor(self):  # -> None:
        ...
    def __aiter__(self):  # -> Self:
        ...
    async def __anext__(self) -> CursorResultType: ...
    async def to_list(self, length: int | None = ...) -> list[CursorResultType]:
        """
        Get list of documents

        :param length: Optional[int] - length of the list
        :return: Union[List[BaseModel], List[Dict[str, Any]]]
        """
