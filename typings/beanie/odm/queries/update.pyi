"""
This type stub file was generated by pyright.
"""

from collections.abc import Generator, Mapping
from enum import StrEnum
from typing import TYPE_CHECKING, Any

from beanie.odm.bulk import BulkWriter
from beanie.odm.documents import DocType
from beanie.odm.interfaces.clone import CloneInterface
from beanie.odm.interfaces.session import SessionMethods
from beanie.odm.interfaces.update import UpdateMethods
from motor.motor_asyncio import AsyncIOMotorClientSession
from pymongo.results import InsertOneResult, UpdateResult

if TYPE_CHECKING: ...

class UpdateResponse(StrEnum):
    UPDATE_RESULT = ...
    OLD_DOCUMENT = ...
    NEW_DOCUMENT = ...

class UpdateQuery(UpdateMethods, SessionMethods, CloneInterface):
    """
    Update Query base class
    """

    def __init__(self, document_model: type[DocType], find_query: Mapping[str, Any]) -> None: ...
    @property
    def update_query(self) -> dict[str, Any]: ...

class UpdateMany(UpdateQuery):
    """
    Update Many query class
    """

    def update(
        self,
        *args: Mapping[str, Any],
        session: AsyncIOMotorClientSession | None = ...,
        bulk_writer: BulkWriter | None = ...,
        **pymongo_kwargs,
    ) -> UpdateQuery:
        """
        Provide modifications to the update query.

        :param args: *Union[dict, Mapping] - the modifications to apply.
        :param session: Optional[AsyncIOMotorClientSession]
        :param bulk_writer: Optional[BulkWriter]
        :param pymongo_kwargs: pymongo native parameters for update operation
        :return: UpdateMany query
        """

    def upsert(
        self,
        *args: Mapping[str, Any],
        on_insert: DocType,
        session: AsyncIOMotorClientSession | None = ...,
        **pymongo_kwargs,
    ) -> UpdateQuery:
        """
        Provide modifications to the upsert query.

        :param args: *Union[dict, Mapping] - the modifications to apply.
        :param on_insert: DocType - document to insert if there is no matched
        document in the collection
        :param session: Optional[AsyncIOMotorClientSession]
        :param **pymongo_kwargs: pymongo native parameters for update operation
        :return: UpdateMany query
        """

    def update_many(
        self,
        *args: Mapping[str, Any],
        session: AsyncIOMotorClientSession | None = ...,
        bulk_writer: BulkWriter | None = ...,
        **pymongo_kwargs,
    ):  # -> UpdateQuery:
        """
        Provide modifications to the update query

        :param args: *Union[dict, Mapping] - the modifications to apply.
        :param session: Optional[AsyncIOMotorClientSession]
        :param bulk_writer: "BulkWriter" - Beanie bulk writer
        :param pymongo_kwargs: pymongo native parameters for update operation
        :return: UpdateMany query
        """

    def __await__(self) -> Generator[Any, None, UpdateResult | InsertOneResult | DocType | None]:
        """
        Run the query
        :return:
        """

class UpdateOne(UpdateQuery):
    """
    Update One query class
    """

    def __init__(self, *args, **kwargs) -> None: ...
    def update(
        self,
        *args: Mapping[str, Any],
        session: AsyncIOMotorClientSession | None = ...,
        bulk_writer: BulkWriter | None = ...,
        response_type: UpdateResponse | None = ...,
        **pymongo_kwargs,
    ) -> UpdateQuery:
        """
        Provide modifications to the update query.

        :param args: *Union[dict, Mapping] - the modifications to apply.
        :param session: Optional[AsyncIOMotorClientSession]
        :param bulk_writer: Optional[BulkWriter]
        :param response_type: UpdateResponse
        :param pymongo_kwargs: pymongo native parameters for update operation
        :return: UpdateMany query
        """

    def upsert(
        self,
        *args: Mapping[str, Any],
        on_insert: DocType,
        session: AsyncIOMotorClientSession | None = ...,
        response_type: UpdateResponse | None = ...,
        **pymongo_kwargs,
    ) -> UpdateQuery:
        """
        Provide modifications to the upsert query.

        :param args: *Union[dict, Mapping] - the modifications to apply.
        :param on_insert: DocType - document to insert if there is no matched
        document in the collection
        :param session: Optional[AsyncIOMotorClientSession]
        :param response_type: Optional[UpdateResponse]
        :param pymongo_kwargs: pymongo native parameters for update operation
        :return: UpdateMany query
        """

    def update_one(
        self,
        *args: Mapping[str, Any],
        session: AsyncIOMotorClientSession | None = ...,
        bulk_writer: BulkWriter | None = ...,
        response_type: UpdateResponse | None = ...,
        **pymongo_kwargs,
    ):  # -> UpdateQuery:
        """
        Provide modifications to the update query. The same as `update()`

        :param args: *Union[dict, Mapping] - the modifications to apply.
        :param session: Optional[AsyncIOMotorClientSession]
        :param bulk_writer: "BulkWriter" - Beanie bulk writer
        :param response_type: Optional[UpdateResponse]
        :param pymongo_kwargs: pymongo native parameters for update operation
        :return: UpdateMany query
        """

    def __await__(self) -> Generator[Any, None, UpdateResult | InsertOneResult | DocType | None]:
        """
        Run the query
        :return:
        """
