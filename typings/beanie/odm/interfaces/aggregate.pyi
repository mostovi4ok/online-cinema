"""
This type stub file was generated by pyright.
"""

from abc import abstractmethod
from typing import Any, TypeVar, overload

from beanie.odm.queries.aggregation import AggregationQuery
from beanie.odm.queries.find import FindMany
from motor.motor_asyncio import AsyncIOMotorClientSession
from pydantic import BaseModel

DocType = TypeVar("DocType", bound=AggregateInterface)
DocumentProjectionType = TypeVar("DocumentProjectionType", bound=BaseModel)

class AggregateInterface:
    @classmethod
    @abstractmethod
    def find_all(cls) -> FindMany: ...
    @overload
    @classmethod
    def aggregate(
        cls: type[DocType],
        aggregation_pipeline: list,
        projection_model: None = ...,
        session: AsyncIOMotorClientSession | None = ...,
        ignore_cache: bool = ...,
        **pymongo_kwargs,
    ) -> AggregationQuery[dict[str, Any]]: ...
    @overload
    @classmethod
    def aggregate(
        cls: type[DocType],
        aggregation_pipeline: list,
        projection_model: type[DocumentProjectionType],
        session: AsyncIOMotorClientSession | None = ...,
        ignore_cache: bool = ...,
        **pymongo_kwargs,
    ) -> AggregationQuery[DocumentProjectionType]: ...
    @classmethod
    def aggregate(
        cls: type[DocType],
        aggregation_pipeline: list,
        projection_model: type[DocumentProjectionType] | None = ...,
        session: AsyncIOMotorClientSession | None = ...,
        ignore_cache: bool = ...,
        **pymongo_kwargs,
    ) -> AggregationQuery[dict[str, Any]] | AggregationQuery[DocumentProjectionType]:
        """
        Aggregate over collection.
        Returns [AggregationQuery](query.md#aggregationquery) query object
        :param aggregation_pipeline: list - aggregation pipeline
        :param projection_model: Type[BaseModel]
        :param session: Optional[AsyncIOMotorClientSession]
        :param ignore_cache: bool
        :param **pymongo_kwargs: pymongo native parameters for aggregate operation
        :return: [AggregationQuery](query.md#aggregationquery)
        """
