"""
This type stub file was generated by pyright.
"""

from abc import abstractmethod
from collections.abc import Mapping
from typing import TYPE_CHECKING, Any, ClassVar, TypeVar, overload

from beanie.odm.documents import Document
from beanie.odm.enums import SortDirection
from beanie.odm.interfaces.detector import ModelType
from beanie.odm.queries.find import FindMany, FindOne
from beanie.odm.settings.base import ItemSettings
from beanie.odm.union_doc import UnionDoc
from beanie.odm.views import View
from motor.motor_asyncio import AsyncIOMotorClientSession
from pydantic import BaseModel

if TYPE_CHECKING: ...
DocumentProjectionType = TypeVar("DocumentProjectionType", bound=BaseModel)
FindType = TypeVar("FindType", bound=Document | UnionDoc | View)

class FindInterface:
    _find_one_query_class: ClassVar[type] = ...
    _find_many_query_class: ClassVar[type] = ...
    _inheritance_inited: bool = ...
    _class_id: ClassVar[str | None]
    _children: ClassVar[dict[str, type]]
    @classmethod
    @abstractmethod
    def get_model_type(cls) -> ModelType: ...
    @classmethod
    @abstractmethod
    def get_settings(cls) -> ItemSettings: ...
    @overload
    @classmethod
    def find_one(
        cls: type[FindType],
        *args: Mapping[str, Any] | bool,
        projection_model: None = ...,
        session: AsyncIOMotorClientSession | None = ...,
        ignore_cache: bool = ...,
        fetch_links: bool = ...,
        with_children: bool = ...,
        nesting_depth: int | None = ...,
        nesting_depths_per_field: dict[str, int] | None = ...,
        **pymongo_kwargs: Any,
    ) -> FindOne[FindType]: ...
    @overload
    @classmethod
    def find_one(
        cls: type[FindType],
        *args: Mapping[str, Any] | bool,
        projection_model: type[DocumentProjectionType],
        session: AsyncIOMotorClientSession | None = ...,
        ignore_cache: bool = ...,
        fetch_links: bool = ...,
        with_children: bool = ...,
        nesting_depth: int | None = ...,
        nesting_depths_per_field: dict[str, int] | None = ...,
        **pymongo_kwargs: Any,
    ) -> FindOne[DocumentProjectionType]: ...
    @classmethod
    def find_one(
        cls: type[FindType],
        *args: Mapping[str, Any] | bool,
        projection_model: type[DocumentProjectionType] | None = ...,
        session: AsyncIOMotorClientSession | None = ...,
        ignore_cache: bool = ...,
        fetch_links: bool = ...,
        with_children: bool = ...,
        nesting_depth: int | None = ...,
        nesting_depths_per_field: dict[str, int] | None = ...,
        **pymongo_kwargs: Any,
    ) -> FindOne[FindType] | FindOne[DocumentProjectionType]:
        """
        Find one document by criteria.
        Returns [FindOne](query.md#findone) query object.
        When awaited this will either return a document or None if no document exists for the search criteria.

        :param args: *Mapping[str, Any] - search criteria
        :param projection_model: Optional[Type[BaseModel]] - projection model
        :param session: Optional[AsyncIOMotorClientSession] - motor session instance
        :param ignore_cache: bool
        :param **pymongo_kwargs: pymongo native parameters for find operation (if Document class contains links, this parameter must fit the respective parameter of the aggregate MongoDB function)
        :return: [FindOne](query.md#findone) - find query instance
        """

    @overload
    @classmethod
    def find_many(
        cls: type[FindType],
        *args: Mapping[str, Any] | bool,
        projection_model: None = ...,
        skip: int | None = ...,
        limit: int | None = ...,
        sort: None | str | list[tuple[str, SortDirection]] = ...,
        session: AsyncIOMotorClientSession | None = ...,
        ignore_cache: bool = ...,
        fetch_links: bool = ...,
        with_children: bool = ...,
        lazy_parse: bool = ...,
        nesting_depth: int | None = ...,
        nesting_depths_per_field: dict[str, int] | None = ...,
        **pymongo_kwargs: Any,
    ) -> FindMany[FindType]: ...
    @overload
    @classmethod
    def find_many(
        cls: type[FindType],
        *args: Mapping[str, Any] | bool,
        projection_model: type[DocumentProjectionType] | None = ...,
        skip: int | None = ...,
        limit: int | None = ...,
        sort: None | str | list[tuple[str, SortDirection]] = ...,
        session: AsyncIOMotorClientSession | None = ...,
        ignore_cache: bool = ...,
        fetch_links: bool = ...,
        with_children: bool = ...,
        lazy_parse: bool = ...,
        nesting_depth: int | None = ...,
        nesting_depths_per_field: dict[str, int] | None = ...,
        **pymongo_kwargs: Any,
    ) -> FindMany[DocumentProjectionType]: ...
    @classmethod
    def find_many(
        cls: type[FindType],
        *args: Mapping[str, Any] | bool,
        projection_model: type[DocumentProjectionType] | None = ...,
        skip: int | None = ...,
        limit: int | None = ...,
        sort: None | str | list[tuple[str, SortDirection]] = ...,
        session: AsyncIOMotorClientSession | None = ...,
        ignore_cache: bool = ...,
        fetch_links: bool = ...,
        with_children: bool = ...,
        lazy_parse: bool = ...,
        nesting_depth: int | None = ...,
        nesting_depths_per_field: dict[str, int] | None = ...,
        **pymongo_kwargs: Any,
    ) -> FindMany[FindType] | FindMany[DocumentProjectionType]:
        """
        Find many documents by criteria.
        Returns [FindMany](query.md#findmany) query object

        :param args: *Mapping[str, Any] - search criteria
        :param skip: Optional[int] - The number of documents to omit.
        :param limit: Optional[int] - The maximum number of results to return.
        :param sort: Union[None, str, List[Tuple[str, SortDirection]]] - A key or a list of (key, direction) pairs specifying the sort order for this query.
        :param projection_model: Optional[Type[BaseModel]] - projection model
        :param session: Optional[AsyncIOMotorClientSession] - motor session
        :param ignore_cache: bool
        :param lazy_parse: bool
        :param **pymongo_kwargs: pymongo native parameters for find operation (if Document class contains links, this parameter must fit the respective parameter of the aggregate MongoDB function)
        :return: [FindMany](query.md#findmany) - query instance
        """

    @overload
    @classmethod
    def find(
        cls: type[FindType],
        *args: Mapping[str, Any] | bool,
        projection_model: None = ...,
        skip: int | None = ...,
        limit: int | None = ...,
        sort: None | str | list[tuple[str, SortDirection]] = ...,
        session: AsyncIOMotorClientSession | None = ...,
        ignore_cache: bool = ...,
        fetch_links: bool = ...,
        with_children: bool = ...,
        lazy_parse: bool = ...,
        nesting_depth: int | None = ...,
        nesting_depths_per_field: dict[str, int] | None = ...,
        **pymongo_kwargs,
    ) -> FindMany[FindType]: ...
    @overload
    @classmethod
    def find(
        cls: type[FindType],
        *args: Mapping[str, Any] | bool,
        projection_model: type[DocumentProjectionType],
        skip: int | None = ...,
        limit: int | None = ...,
        sort: None | str | list[tuple[str, SortDirection]] = ...,
        session: AsyncIOMotorClientSession | None = ...,
        ignore_cache: bool = ...,
        fetch_links: bool = ...,
        with_children: bool = ...,
        lazy_parse: bool = ...,
        nesting_depth: int | None = ...,
        nesting_depths_per_field: dict[str, int] | None = ...,
        **pymongo_kwargs,
    ) -> FindMany[DocumentProjectionType]: ...
    @classmethod
    def find(
        cls: type[FindType],
        *args: Mapping[str, Any] | bool,
        projection_model: type[DocumentProjectionType] | None = ...,
        skip: int | None = ...,
        limit: int | None = ...,
        sort: None | str | list[tuple[str, SortDirection]] = ...,
        session: AsyncIOMotorClientSession | None = ...,
        ignore_cache: bool = ...,
        fetch_links: bool = ...,
        with_children: bool = ...,
        lazy_parse: bool = ...,
        nesting_depth: int | None = ...,
        nesting_depths_per_field: dict[str, int] | None = ...,
        **pymongo_kwargs,
    ) -> FindMany[FindType] | FindMany[DocumentProjectionType]:
        """
        The same as find_many
        """

    @overload
    @classmethod
    def find_all(
        cls: type[FindType],
        skip: int | None = ...,
        limit: int | None = ...,
        sort: None | str | list[tuple[str, SortDirection]] = ...,
        projection_model: None = ...,
        session: AsyncIOMotorClientSession | None = ...,
        ignore_cache: bool = ...,
        with_children: bool = ...,
        lazy_parse: bool = ...,
        nesting_depth: int | None = ...,
        nesting_depths_per_field: dict[str, int] | None = ...,
        **pymongo_kwargs,
    ) -> FindMany[FindType]: ...
    @overload
    @classmethod
    def find_all(
        cls: type[FindType],
        skip: int | None = ...,
        limit: int | None = ...,
        sort: None | str | list[tuple[str, SortDirection]] = ...,
        projection_model: type[DocumentProjectionType] | None = ...,
        session: AsyncIOMotorClientSession | None = ...,
        ignore_cache: bool = ...,
        with_children: bool = ...,
        lazy_parse: bool = ...,
        nesting_depth: int | None = ...,
        nesting_depths_per_field: dict[str, int] | None = ...,
        **pymongo_kwargs,
    ) -> FindMany[DocumentProjectionType]: ...
    @classmethod
    def find_all(
        cls: type[FindType],
        skip: int | None = ...,
        limit: int | None = ...,
        sort: None | str | list[tuple[str, SortDirection]] = ...,
        projection_model: type[DocumentProjectionType] | None = ...,
        session: AsyncIOMotorClientSession | None = ...,
        ignore_cache: bool = ...,
        with_children: bool = ...,
        lazy_parse: bool = ...,
        nesting_depth: int | None = ...,
        nesting_depths_per_field: dict[str, int] | None = ...,
        **pymongo_kwargs,
    ) -> FindMany[FindType] | FindMany[DocumentProjectionType]:
        """
        Get all the documents

        :param skip: Optional[int] - The number of documents to omit.
        :param limit: Optional[int] - The maximum number of results to return.
        :param sort: Union[None, str, List[Tuple[str, SortDirection]]] - A key or a list of (key, direction) pairs specifying the sort order for this query.
        :param projection_model: Optional[Type[BaseModel]] - projection model
        :param session: Optional[AsyncIOMotorClientSession] - motor session
        :param **pymongo_kwargs: pymongo native parameters for find operation (if Document class contains links, this parameter must fit the respective parameter of the aggregate MongoDB function)
        :return: [FindMany](query.md#findmany) - query instance
        """

    @overload
    @classmethod
    def all(
        cls: type[FindType],
        projection_model: None = ...,
        skip: int | None = ...,
        limit: int | None = ...,
        sort: None | str | list[tuple[str, SortDirection]] = ...,
        session: AsyncIOMotorClientSession | None = ...,
        ignore_cache: bool = ...,
        with_children: bool = ...,
        lazy_parse: bool = ...,
        nesting_depth: int | None = ...,
        nesting_depths_per_field: dict[str, int] | None = ...,
        **pymongo_kwargs,
    ) -> FindMany[FindType]: ...
    @overload
    @classmethod
    def all(
        cls: type[FindType],
        projection_model: type[DocumentProjectionType],
        skip: int | None = ...,
        limit: int | None = ...,
        sort: None | str | list[tuple[str, SortDirection]] = ...,
        session: AsyncIOMotorClientSession | None = ...,
        ignore_cache: bool = ...,
        with_children: bool = ...,
        lazy_parse: bool = ...,
        nesting_depth: int | None = ...,
        nesting_depths_per_field: dict[str, int] | None = ...,
        **pymongo_kwargs,
    ) -> FindMany[DocumentProjectionType]: ...
    @classmethod
    def all(
        cls: type[FindType],
        projection_model: type[DocumentProjectionType] | None = ...,
        skip: int | None = ...,
        limit: int | None = ...,
        sort: None | str | list[tuple[str, SortDirection]] = ...,
        session: AsyncIOMotorClientSession | None = ...,
        ignore_cache: bool = ...,
        with_children: bool = ...,
        lazy_parse: bool = ...,
        nesting_depth: int | None = ...,
        nesting_depths_per_field: dict[str, int] | None = ...,
        **pymongo_kwargs,
    ) -> FindMany[FindType] | FindMany[DocumentProjectionType]:
        """
        the same as find_all
        """

    @classmethod
    async def count(cls) -> int:
        """
        Number of documents in the collections
        The same as find_all().count()

        :return: int
        """
