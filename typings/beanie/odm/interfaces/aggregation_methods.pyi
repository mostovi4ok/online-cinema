"""
This type stub file was generated by pyright.
"""

from abc import abstractmethod

from beanie.odm.fields import ExpressionField
from motor.motor_asyncio import AsyncIOMotorClientSession

class AggregateMethods:
    """
    Aggregate methods
    """

    @abstractmethod
    def aggregate(self, aggregation_pipeline, projection_model=..., session=..., ignore_cache: bool = ...):  # -> None:
        ...
    async def sum(
        self,
        field: str | ExpressionField,
        session: AsyncIOMotorClientSession | None = ...,
        ignore_cache: bool = ...,
    ) -> float | None:
        """
        Sum of values of the given field

        Example:
        ```python
        class Sample(Document):
            price: int
            count: int

        sum_count = await Document.find(Sample.price <= 100).sum(Sample.count)
        ```

        :param field: Union[str, ExpressionField]
        :param session: Optional[AsyncIOMotorClientSession] - motor session
        :param ignore_cache: bool
        :return: float - sum. None if there are no items.

        """

    async def avg(
        self, field, session: AsyncIOMotorClientSession | None = ..., ignore_cache: bool = ...
    ) -> float | None:
        """
        Average of values of the given field

        Example:
        ```python
        class Sample(Document):
            price: int
            count: int

        avg_count = await Document.find(Sample.price <= 100).avg(Sample.count)
        ```

        :param field: Union[str, ExpressionField]
        :param session: Optional[AsyncIOMotorClientSession] - motor session
        :param ignore_cache: bool
        :return: Optional[float] - avg. None if there are no items.

        """

    async def max(
        self,
        field: str | ExpressionField,
        session: AsyncIOMotorClientSession | None = ...,
        ignore_cache: bool = ...,
    ) -> float | None:
        """
        Max of the values of the given field

        Example:
        ```python
        class Sample(Document):
            price: int
            count: int

        max_count = await Document.find(Sample.price <= 100).max(Sample.count)
        ```

        :param field: Union[str, ExpressionField]
        :param session: Optional[AsyncIOMotorClientSession] - motor session
        :return: float - max. None if there are no items.

        """

    async def min(
        self,
        field: str | ExpressionField,
        session: AsyncIOMotorClientSession | None = ...,
        ignore_cache: bool = ...,
    ) -> float | None:
        """
        Min of the values of the given field

        Example:
        ```python
        class Sample(Document):
            price: int
            count: int

        min_count = await Document.find(Sample.price <= 100).min(Sample.count)
        ```

        :param field: Union[str, ExpressionField]
        :param session: Optional[AsyncIOMotorClientSession] - motor session
        :return: float - min. None if there are no items.

        """
