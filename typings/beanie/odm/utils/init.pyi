"""
This type stub file was generated by pyright.
"""

from collections.abc import Sequence
from typing import Any

from beanie.odm.documents import DocType, Document
from beanie.odm.fields import LinkInfo
from beanie.odm.union_doc import UnionDoc, UnionDocType
from beanie.odm.utils.pydantic import IS_PYDANTIC_V2
from beanie.odm.views import View
from motor.motor_asyncio import AsyncIOMotorDatabase
from pydantic import BaseModel
from pydantic.fields import FieldInfo

class Output(BaseModel):
    class_name: str
    collection_name: str

class Initializer:
    def __init__(
        self,
        database: AsyncIOMotorDatabase = ...,
        connection_string: str | None = ...,
        document_models: Sequence[type[DocType | UnionDocType | View] | str] | None = ...,
        allow_index_dropping: bool = ...,
        recreate_views: bool = ...,
        multiprocessing_mode: bool = ...,
    ) -> None:
        """
        Beanie initializer

        :param database: AsyncIOMotorDatabase - motor database instance
        :param connection_string: str - MongoDB connection string
        :param document_models: List[Union[Type[DocType], Type[UnionDocType], str]] - model classes
        or strings with dot separated paths
        :param allow_index_dropping: bool - if index dropping is allowed.
        Default False
        :param recreate_views: bool - if views should be recreated. Default False
        :param multiprocessing_mode: bool - if multiprocessing mode is on
        it will patch the motor client to use process's event loop.
        :return: None
        """

    def __await__(self):  # -> Generator[Any, Any, None]:
        ...
    def fill_docs_registry(self):  # -> None:
        ...
    @staticmethod
    def get_model(dot_path: str) -> type[DocType]:
        """
        Get the model by the path in format bar.foo.Model

        :param dot_path: str - dot seprated path to the model
        :return: Type[DocType] - class of the model
        """

    def init_settings(self, cls: type[Document | View | UnionDoc]):  # -> None:
        """
        Init Settings

        :param cls: Union[Type[Document], Type[View], Type[UnionDoc]] - Class
        to init settings
        :return: None
        """

    if not IS_PYDANTIC_V2:
        def update_forward_refs(self, cls: type[BaseModel]):  # -> None:
            """
            Update forward refs

            :param cls: Type[BaseModel] - class to update forward refs
            :return: None
            """

    def detect_link(self, field: FieldInfo, field_name: str) -> LinkInfo | None:
        """
        It detects link and returns LinkInfo if any found.

        :param field: ModelField
        :return: Optional[LinkInfo]
        """

    def check_nested_links(self, link_info: LinkInfo, current_depth: int):  # -> None:
        ...
    @staticmethod
    def set_default_class_vars(cls: type[Document]):  # -> None:
        """
        Set default class variables.

        :param cls: Union[Type[Document], Type[View], Type[UnionDoc]] - Class
        to init settings
        :return:
        """

    @staticmethod
    def init_cache(cls) -> None:
        """
        Init model's cache
        :return: None
        """

    def init_document_fields(self, cls) -> None:
        """
        Init class fields
        :return: None
        """

    @staticmethod
    def init_actions(cls):  # -> None:
        """
        Init event-based actions
        """

    async def init_document_collection(self, cls):  # -> None:
        """
        Init collection for the Document-based class
        :param cls:
        :return:
        """

    async def init_indexes(self, cls, allow_index_dropping: bool = ...):  # -> None:
        """
        Async indexes initializer
        """

    async def init_document(self, cls: type[Document]) -> Output | None:
        """
        Init Document-based class

        :param cls:
        :return:
        """

    def init_view_fields(self, cls) -> None:
        """
        Init class fields
        :return: None
        """

    def init_view_collection(self, cls):  # -> None:
        """
        Init collection for View

        :param cls:
        :return:
        """

    async def init_view(self, cls: type[View]):  # -> None:
        """
        Init View-based class

        :param cls:
        :return:
        """

    async def init_union_doc(self, cls: type[UnionDoc]):  # -> None:
        """
        Init Union Doc based class

        :param cls:
        :return:
        """

    @staticmethod
    def check_deprecations(cls: type[Document | View | UnionDoc]):  # -> None:
        ...
    async def init_class(self, cls: type[Document | View | UnionDoc]):  # -> None:
        """
        Init Document, View or UnionDoc based class.

        :param cls:
        :return:
        """

async def init_beanie(
    database: AsyncIOMotorDatabase[Any] | None = None,
    connection_string: str | None = None,
    document_models: Sequence[type[Document | UnionDoc | View] | str] | None = None,
    allow_index_dropping: bool = False,
    recreate_views: bool = False,
    multiprocessing_mode: bool = False,
) -> None:
    """
    Beanie initialization

    :param database: AsyncIOMotorDatabase - motor database instance
    :param connection_string: str - MongoDB connection string
    :param document_models: List[Union[Type[DocType], Type[UnionDocType], str]] - model classes
    or strings with dot separated paths
    :param allow_index_dropping: bool - if index dropping is allowed.
    Default False
    :param recreate_views: bool - if views should be recreated. Default False
    :param multiprocessing_mode: bool - if multiprocessing mode is on
        it will patch the motor client to use process's event loop. Default False
    :return: None
    """
