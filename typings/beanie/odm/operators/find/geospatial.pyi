"""
This type stub file was generated by pyright.
"""

from abc import ABC
from enum import StrEnum

from beanie.odm.operators.find import BaseFindOperator

class BaseFindGeospatialOperator(BaseFindOperator, ABC): ...

class GeoIntersects(BaseFindGeospatialOperator):
    """
    `$geoIntersects` query operator

    Example:
    ```python
    class GeoObject(BaseModel):
        type: str = "Point"
        coordinates: Tuple[float, float]

    class Place(Document):
        geo: GeoObject

        class Collection:
            name = "places"
            indexes = [
                [("geo", pymongo.GEOSPHERE)],  # GEO index
            ]

    GeoIntersects(Place.geo, "Polygon", [[0, 0], [1, 1], [3, 3]])
    ```

    Will return query object like

    ```python
    {
        "geo": {
            "$geoIntersects": {
                "$geometry": {
                    "type": "Polygon",
                    "coordinates": [[0, 0], [1, 1], [3, 3]],
                }
            }
        }
    }
    ```

    MongoDB doc:
    <https://docs.mongodb.com/manual/reference/operator/query/geoIntersects/>

    """

    def __init__(self, field, geo_type: str, coordinates: list[list[float]]) -> None: ...
    @property
    def query(self):  # -> dict[Any, dict[str, dict[str, dict[str, str | List[List[float]]]]]]:
        ...

class GeoWithinTypes(StrEnum):
    Polygon = ...
    MultiPolygon = ...

class GeoWithin(BaseFindGeospatialOperator):
    """
    `$geoWithin` query operator

    Example:
    ```python
    class GeoObject(BaseModel):
        type: str = "Point"
        coordinates: Tuple[float, float]

    class Place(Document):
        geo: GeoObject

        class Collection:
            name = "places"
            indexes = [
                [("geo", pymongo.GEOSPHERE)],  # GEO index
            ]

    GeoWithin(Place.geo, "Polygon", [[0, 0], [1, 1], [3, 3]])
    ```

    Will return query object like

    ```python
    {
        "geo": {
            "$geoWithin": {
                "$geometry": {
                    "type": "Polygon",
                    "coordinates": [[0, 0], [1, 1], [3, 3]],
                }
            }
        }
    }
    ```

    MongoDB doc:
    <https://docs.mongodb.com/manual/reference/operator/query/geoWithin/>

    """

    def __init__(self, field, geo_type: GeoWithinTypes, coordinates: list[list[float]]) -> None: ...
    @property
    def query(self):  # -> dict[Any, dict[str, dict[str, dict[str, GeoWithinTypes | List[List[float]]]]]]:
        ...

class Box(BaseFindGeospatialOperator):
    """
    `$box` query operator

    Example:
    ```python
    class GeoObject(BaseModel):
        type: str = "Point"
        coordinates: Tuple[float, float]

    class Place(Document):
        geo: GeoObject

        class Collection:
            name = "places"
            indexes = [
                [("geo", pymongo.GEOSPHERE)],  # GEO index
            ]

    Box(Place.geo, lower_left=[10, 12], upper_right=[15, 20])
    ```

    Will return query object like

    ```python
    {"geo": {"$geoWithin": {"$box": [[10, 12], [15, 20]]}}}
    ```

    MongoDB doc:
    <https://docs.mongodb.com/manual/reference/operator/query/box/>

    """

    def __init__(self, field, lower_left: list[float], upper_right: list[float]) -> None: ...
    @property
    def query(self):  # -> dict[Any, dict[str, dict[str, list[List[float]]]]]:
        ...

class Near(BaseFindGeospatialOperator):
    """
    `$near` query operator

    Example:
    ```python
    class GeoObject(BaseModel):
        type: str = "Point"
        coordinates: Tuple[float, float]

    class Place(Document):
        geo: GeoObject

        class Collection:
            name = "places"
            indexes = [
                [("geo", pymongo.GEOSPHERE)],  # GEO index
            ]

    Near(Place.geo, 1.2345, 2.3456, min_distance=500)
    ```

    Will return query object like

    ```python
    {
        "geo": {
            "$near": {
                "$geometry": {
                    "type": "Point",
                    "coordinates": [1.2345, 2.3456],
                },
                "$maxDistance": 500,
            }
        }
    }
    ```

    MongoDB doc:
    <https://docs.mongodb.com/manual/reference/operator/query/near/>

    """

    operator = ...
    def __init__(
        self,
        field,
        longitude: float,
        latitude: float,
        max_distance: float | None = ...,
        min_distance: float | None = ...,
    ) -> None: ...
    @property
    def query(self):  # -> dict[Any, dict[str, dict[str, dict[str, str | list[float]]]]]:
        ...

class NearSphere(Near):
    """
    `$nearSphere` query operator

    Example:
    ```python
    class GeoObject(BaseModel):
        type: str = "Point"
        coordinates: Tuple[float, float]

    class Place(Document):
        geo: GeoObject

        class Collection:
            name = "places"
            indexes = [
                [("geo", pymongo.GEOSPHERE)],  # GEO index
            ]

    NearSphere(Place.geo, 1.2345, 2.3456, min_distance=500)
    ```

    Will return query object like

    ```python
    {
        "geo": {
            "$nearSphere": {
                "$geometry": {
                    "type": "Point",
                    "coordinates": [1.2345, 2.3456],
                },
                "$maxDistance": 500,
            }
        }
    }
    ```

    MongoDB doc:
    <https://docs.mongodb.com/manual/reference/operator/query/nearSphere/>

    """

    operator = ...
