"""
This type stub file was generated by pyright.
"""

from abc import ABC
from collections.abc import Mapping
from typing import Any

from beanie.odm.operators.find import BaseFindOperator

class BaseFindLogicalOperator(BaseFindOperator, ABC): ...

class LogicalOperatorForListOfExpressions(BaseFindLogicalOperator):
    operator: str = ...
    def __init__(self, *expressions: BaseFindOperator | dict[str, Any] | Mapping[str, Any] | bool) -> None: ...
    @property
    def query(
        self,
    ):  # -> BaseFindOperator | Dict[str, Any] | Mapping[str, Any] | bool | dict[str, list[BaseFindOperator | Dict[str, Any] | Mapping[str, Any] | bool]]:
        ...

class Or(LogicalOperatorForListOfExpressions):
    """
    `$or` query operator

    Example:
    ```python
    class Product(Document):
        price: float
        category: str

    Or(Product.price < 10, Product.category == "Sweets")
    ```

    Will return query object like

    ```python
    {"$or": [{"price": {"$lt": 10}}, {"category": "Sweets"}]}
    ```

    MongoDB doc:
    <https://docs.mongodb.com/manual/reference/operator/query/or/>

    """

    operator = ...

class And(LogicalOperatorForListOfExpressions):
    """
    `$and` query operator

    Example:
    ```python
    class Product(Document):
        price: float
        category: str

    And(Product.price < 10, Product.category == "Sweets")
    ```

    Will return query object like

    ```python
    {"$and": [{"price": {"$lt": 10}}, {"category": "Sweets"}]}
    ```

    MongoDB doc:
    <https://docs.mongodb.com/manual/reference/operator/query/and/>

    """

    operator = ...

class Nor(BaseFindLogicalOperator):
    """
    `$nor` query operator

    Example:
    ```python
    class Product(Document):
        price: float
        category: str

    Nor(Product.price < 10, Product.category == "Sweets")
    ```

    Will return query object like

    ```python
    {"$nor": [{"price": {"$lt": 10}}, {"category": "Sweets"}]}
    ```

    MongoDB doc:
    <https://docs.mongodb.com/manual/reference/operator/query/nor/>

    """

    def __init__(self, *expressions: BaseFindOperator | dict[str, Any] | Mapping[str, Any] | bool) -> None: ...
    @property
    def query(self):  # -> dict[str, list[BaseFindOperator | Dict[str, Any] | Mapping[str, Any] | bool]]:
        ...

class Not(BaseFindLogicalOperator):
    """
    `$not` query operator

    Example:
    ```python
    class Product(Document):
        price: float
        category: str

    Not(Product.price < 10)
    ```

    Will return query object like

    ```python
    {"$not": {"price": {"$lt": 10}}}
    ```

    MongoDB doc:
    <https://docs.mongodb.com/manual/reference/operator/query/not/>

    """

    def __init__(self, expression: Mapping[str, Any]) -> None: ...
    @property
    def query(self):  # -> dict[str, dict[str, dict[Any, Any]]] | dict[str, dict[str, dict[str, dict[Any, Any] | Any]]]:
        ...
