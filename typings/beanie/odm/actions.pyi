"""
This type stub file was generated by pyright.
"""

from collections.abc import Callable
from enum import StrEnum
from typing import TYPE_CHECKING, Any, TypeVar

from beanie.odm.documents import AsyncDocMethod, DocType, Document
from typing_extensions import ParamSpec

if TYPE_CHECKING: ...
P = ParamSpec("P")
R = TypeVar("R")

class EventTypes(StrEnum):
    INSERT = ...
    REPLACE = ...
    SAVE = ...
    SAVE_CHANGES = ...
    VALIDATE_ON_SAVE = ...
    DELETE = ...
    UPDATE = ...

Insert = ...
Replace = ...
Save = ...
SaveChanges = ...
ValidateOnSave = ...
Delete = ...
Update = ...

class ActionDirections(StrEnum):
    BEFORE = ...
    AFTER = ...

Before = ...
After = ...

class ActionRegistry:
    _actions: dict[
        type[Document],
        dict[EventTypes, dict[ActionDirections, list[Callable[..., Any]]]],
    ] = ...
    @classmethod
    def clean_actions(cls, document_class: type[Document]):  # -> None:
        ...
    @classmethod
    def add_action(
        cls,
        document_class: type[Document],
        event_types: list[EventTypes],
        action_direction: ActionDirections,
        funct: Callable,
    ):  # -> None:
        """
        Add action to the action registry
        :param document_class: document class
        :param event_types: List[EventTypes]
        :param action_direction: ActionDirections - before or after
        :param funct: Callable - function
        """

    @classmethod
    def get_action_list(
        cls, document_class: type[Document], event_type: EventTypes, action_direction: ActionDirections
    ) -> list[Callable]:
        """
        Get stored action list
        :param document_class: Type - document class
        :param event_type: EventTypes - type of needed event
        :param action_direction: ActionDirections - before or after
        :return: List[Callable] - list of stored methods
        """

    @classmethod
    async def run_actions(
        cls,
        instance: Document,
        event_type: EventTypes,
        action_direction: ActionDirections,
        exclude: list[ActionDirections | str],
    ):  # -> None:
        """
        Run actions
        :param instance: Document - object of the Document subclass
        :param event_type: EventTypes - event types
        :param action_direction: ActionDirections - before or after
        """

F = TypeVar("F", bound=Any)

def register_action(
    event_types: tuple[list[EventTypes] | EventTypes, ...], action_direction: ActionDirections
) -> Callable[[F], F]:
    """
    Decorator. Base registration method.
    Used inside `before_event` and `after_event`
    :param event_types: Union[List[EventTypes], EventTypes] - event types
    :param action_direction: ActionDirections - before or after
    :return:
    """

def before_event(*args: list[EventTypes] | EventTypes) -> Callable[[F], F]:
    """
    Decorator. It adds action, which should run before mentioned one
    or many events happen

    :param args: Union[List[EventTypes], EventTypes] - event types
    :return: None
    """

def after_event(*args: list[EventTypes] | EventTypes) -> Callable[[F], F]:
    """
    Decorator. It adds action, which should run after mentioned one
    or many events happen

    :param args: Union[List[EventTypes], EventTypes] - event types
    :return: None
    """

def wrap_with_actions(
    event_type: EventTypes,
) -> Callable[[AsyncDocMethod[DocType, P, R]], AsyncDocMethod[DocType, P, R]]:
    """
    Helper function to wrap Document methods with
    before and after event listeners
    :param event_type: EventTypes - event types
    :return: None
    """
