"""
This type stub file was generated by pyright.
"""

import json
from typing import TYPE_CHECKING, Any

from flask import Flask
from flask_jwt_extended import JWTManager

HAS_JSON_PROVIDER = ...
if TYPE_CHECKING: ...

def get_jwt_manager() -> JWTManager: ...
def has_user_lookup() -> bool: ...
def user_lookup(*args, **kwargs) -> Any: ...
def verify_token_type(decoded_token: dict, refresh: bool) -> None: ...
def verify_token_not_blocklisted(jwt_header: dict, jwt_data: dict) -> None: ...
def custom_verification_for_token(jwt_header: dict, jwt_data: dict) -> None: ...

class JSONEncoder(json.JSONEncoder):
    """A JSON encoder which uses the app.json_provider_class for the default"""

    def default(self, o: Any) -> Any: ...

def get_json_encoder(app: Flask) -> type[json.JSONEncoder]:
    """Get the JSON Encoder for the provided flask app

    Starting with flask version 2.2 the flask application provides a
    interface to register a custom JSON Encoder/Decoder under the json_provider_class.
    As this interface is not compatible with the standard JSONEncoder, the `default`
    method of the class is wrapped.

    Lookup Order:
      - app.json_encoder - For Flask < 2.2
      - app.json_provider_class.default
      - flask.json.provider.DefaultJSONProvider.default

    """
